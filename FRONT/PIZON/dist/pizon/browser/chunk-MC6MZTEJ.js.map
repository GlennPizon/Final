{
  "version": 3,
  "sources": ["src/app/_helpers/error.interceptor.ts", "src/app/_helpers/jwt.interceptor.ts", "src/app/_helpers/must-match.validator.ts", "src/app/_helpers/app.initializer.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private accountService: AccountService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if ([401, 403].includes(err.status) && this.accountService.accountValue) {\r\n                // auto logout if 401 or 403 response returned from api\r\n                this.accountService.logout();\r\n            }\r\n\r\n            const error = (err && err.error && err.error.message) || err.statusText;\r\n            console.error(err);\r\n            return throwError(error);\r\n        }))\r\n    }\r\n}", "\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AccountService } from '../_services';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private accountService: AccountService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add auth header with jwt if account is logged in and request is to the api url\r\n        const account = this.accountService.accountValue;\r\n        const isLoggedIn = account && account.jwtToken;\r\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\r\n        if (isLoggedIn && isApiUrl) {\r\n            request = request.clone({\r\n                setHeaders: { Authorization: `Bearer ${account.jwtToken}` }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}\r\n", "import { UntypedFormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: UntypedFormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\r\n            // return if another validator has already found an error on the matchingControl\r\n            return;\r\n        }\r\n\r\n        // set error on matchingControl if validation fails\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}", "import { AccountService } from '../_services';\r\n\r\nexport function appInitializer(accountService: AccountService) {\r\n  return () => new Promise<void>((resolve) => {\r\n    accountService.refreshToken().subscribe().add(resolve);\r\n  });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAQM,IAAO,mBAAP,MAAO,kBAAgB;EACL;EAApB,YAAoB,gBAA8B;AAA9B,SAAA,iBAAA;EAAkC;EAEtD,UAAU,SAA2B,MAAiB;AAClD,WAAO,KAAK,OAAO,OAAO,EAAE,KAAK,WAAW,SAAM;AAC9C,UAAI,CAAC,KAAK,GAAG,EAAE,SAAS,IAAI,MAAM,KAAK,KAAK,eAAe,cAAc;AAErE,aAAK,eAAe,OAAM;MAC9B;AAEA,YAAM,QAAS,OAAO,IAAI,SAAS,IAAI,MAAM,WAAY,IAAI;AAC7D,cAAQ,MAAM,GAAG;AACjB,aAAO,WAAW,KAAK;IAC3B,CAAC,CAAC;EACN;;qCAdS,mBAAgB,mBAAA,cAAA,CAAA;EAAA;4EAAhB,mBAAgB,SAAhB,kBAAgB,UAAA,CAAA;;;sEAAhB,kBAAgB,CAAA;UAD5B;;;;;ACCK,IAAO,iBAAP,MAAO,gBAAc;EACH;EAApB,YAAoB,gBAA8B;AAA9B,SAAA,iBAAA;EAAkC;EAEtD,UAAU,SAA2B,MAAiB;AAElD,UAAM,UAAU,KAAK,eAAe;AACpC,UAAM,aAAa,WAAW,QAAQ;AACtC,UAAM,WAAW,QAAQ,IAAI,WAAW,YAAY,MAAM;AAC1D,QAAI,cAAc,UAAU;AACxB,gBAAU,QAAQ,MAAM;QACpB,YAAY,EAAE,eAAe,UAAU,QAAQ,QAAQ,GAAE;OAC5D;IACL;AAEA,WAAO,KAAK,OAAO,OAAO;EAC9B;;qCAfS,iBAAc,mBAAA,cAAA,CAAA;EAAA;4EAAd,iBAAc,SAAd,gBAAc,UAAA,CAAA;;;sEAAd,gBAAc,CAAA;UAD1B;;;;;ACJK,SAAU,UAAU,aAAqB,qBAA2B;AACtE,SAAO,CAAC,cAA+B;AACnC,UAAM,UAAU,UAAU,SAAS,WAAW;AAC9C,UAAM,kBAAkB,UAAU,SAAS,mBAAmB;AAE9D,QAAI,gBAAgB,UAAU,CAAC,gBAAgB,OAAO,WAAW,GAAG;AAEhE;IACJ;AAGA,QAAI,QAAQ,UAAU,gBAAgB,OAAO;AACzC,sBAAgB,UAAU,EAAE,WAAW,KAAI,CAAE;IACjD,OAAO;AACH,sBAAgB,UAAU,IAAI;IAClC;EACJ;AACJ;;;AClBM,SAAU,eAAe,gBAA8B;AAC3D,SAAO,MAAM,IAAI,QAAc,CAAC,YAAW;AACzC,mBAAe,aAAY,EAAG,UAAS,EAAG,IAAI,OAAO;EACvD,CAAC;AACH;",
  "names": []
}
