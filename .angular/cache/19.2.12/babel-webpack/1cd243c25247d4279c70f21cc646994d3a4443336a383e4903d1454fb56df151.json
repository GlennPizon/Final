{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AccountService {\n  constructor() {\n    this.accounts = [{\n      id: 1,\n      title: 'Mr.',\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@example.com',\n      role: 'admin',\n      status: 'active'\n    }, {\n      id: 2,\n      title: 'Ms.',\n      firstName: 'Jane',\n      lastName: 'Smith',\n      email: 'jane.smith@example.com',\n      role: 'user',\n      status: 'active'\n    }, {\n      id: 3,\n      title: 'Dr.',\n      firstName: 'Mike',\n      lastName: 'Johnson',\n      email: 'mike.johnson@example.com',\n      role: 'user',\n      status: 'inactive'\n    }];\n    this.nextId = 4;\n  }\n  getAccounts() {\n    return of(this.accounts);\n  }\n  getAccount(id) {\n    const account = this.accounts.find(a => a.id === id);\n    return of(account);\n  }\n  createAccount(account) {\n    const newAccount = {\n      ...account,\n      id: this.nextId++\n    };\n    this.accounts.push(newAccount);\n    return of(newAccount);\n  }\n  updateAccount(id, changes) {\n    const index = this.accounts.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.accounts[index] = {\n        ...this.accounts[index],\n        ...changes\n      };\n    }\n    return of(this.accounts[index]);\n  }\n  deleteAccount(id) {\n    const index = this.accounts.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.accounts.splice(index, 1);\n    }\n    return of();\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AccountService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","AccountService","constructor","accounts","id","title","firstName","lastName","email","role","status","nextId","getAccounts","getAccount","account","find","a","createAccount","newAccount","push","updateAccount","changes","index","findIndex","deleteAccount","splice","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rambo\\OneDrive\\Desktop\\cudillo-frontend\\frontend-cudillo\\src\\app\\services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Account } from '../models/account.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n  private accounts: Account[] = [\r\n    {\r\n      id: 1,\r\n      title: 'Mr.',\r\n      firstName: 'John',\r\n      lastName: 'Doe',\r\n      email: 'john.doe@example.com',\r\n      role: 'admin',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Ms.',\r\n      firstName: 'Jane',\r\n      lastName: 'Smith',\r\n      email: 'jane.smith@example.com',\r\n      role: 'user',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Dr.',\r\n      firstName: 'Mike',\r\n      lastName: 'Johnson',\r\n      email: 'mike.johnson@example.com',\r\n      role: 'user',\r\n      status: 'inactive'\r\n    }\r\n  ];\r\n  private nextId = 4;\r\n\r\n  constructor() { }\r\n\r\n  getAccounts(): Observable<Account[]> {\r\n    return of(this.accounts);\r\n  }\r\n\r\n  getAccount(id: number): Observable<Account> {\r\n    const account = this.accounts.find(a => a.id === id) as Account;\r\n    return of(account);\r\n  }\r\n\r\n  createAccount(account: Omit<Account, 'id'>): Observable<Account> {\r\n    const newAccount = { ...account, id: this.nextId++ };\r\n    this.accounts.push(newAccount);\r\n    return of(newAccount);\r\n  }\r\n\r\n  updateAccount(id: number, changes: Partial<Account>): Observable<Account> {\r\n    const index = this.accounts.findIndex(a => a.id === id);\r\n    if (index !== -1) {\r\n      this.accounts[index] = { ...this.accounts[index], ...changes };\r\n    }\r\n    return of(this.accounts[index]);\r\n  }\r\n\r\n  deleteAccount(id: number): Observable<void> {\r\n    const index = this.accounts.findIndex(a => a.id === id);\r\n    if (index !== -1) {\r\n      this.accounts.splice(index, 1);\r\n    }\r\n    return of();\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;;AAMrC,OAAM,MAAOC,cAAc;EAgCzBC,YAAA;IA/BQ,KAAAC,QAAQ,GAAc,CAC5B;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,KAAK;MACZC,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,sBAAsB;MAC7BC,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE;KACT,EACD;MACEN,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,KAAK;MACZC,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,OAAO;MACjBC,KAAK,EAAE,wBAAwB;MAC/BC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE;KACT,EACD;MACEN,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,KAAK;MACZC,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,SAAS;MACnBC,KAAK,EAAE,0BAA0B;MACjCC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE;KACT,CACF;IACO,KAAAC,MAAM,GAAG,CAAC;EAEF;EAEhBC,WAAWA,CAAA;IACT,OAAOZ,EAAE,CAAC,IAAI,CAACG,QAAQ,CAAC;EAC1B;EAEAU,UAAUA,CAACT,EAAU;IACnB,MAAMU,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAY;IAC/D,OAAOJ,EAAE,CAACc,OAAO,CAAC;EACpB;EAEAG,aAAaA,CAACH,OAA4B;IACxC,MAAMI,UAAU,GAAG;MAAE,GAAGJ,OAAO;MAAEV,EAAE,EAAE,IAAI,CAACO,MAAM;IAAE,CAAE;IACpD,IAAI,CAACR,QAAQ,CAACgB,IAAI,CAACD,UAAU,CAAC;IAC9B,OAAOlB,EAAE,CAACkB,UAAU,CAAC;EACvB;EAEAE,aAAaA,CAAChB,EAAU,EAAEiB,OAAyB;IACjD,MAAMC,KAAK,GAAG,IAAI,CAACnB,QAAQ,CAACoB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;IACvD,IAAIkB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACnB,QAAQ,CAACmB,KAAK,CAAC,GAAG;QAAE,GAAG,IAAI,CAACnB,QAAQ,CAACmB,KAAK,CAAC;QAAE,GAAGD;MAAO,CAAE;IAChE;IACA,OAAOrB,EAAE,CAAC,IAAI,CAACG,QAAQ,CAACmB,KAAK,CAAC,CAAC;EACjC;EAEAE,aAAaA,CAACpB,EAAU;IACtB,MAAMkB,KAAK,GAAG,IAAI,CAACnB,QAAQ,CAACoB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;IACvD,IAAIkB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACnB,QAAQ,CAACsB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAChC;IACA,OAAOtB,EAAE,EAAE;EACb;;;uCA/DWC,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}