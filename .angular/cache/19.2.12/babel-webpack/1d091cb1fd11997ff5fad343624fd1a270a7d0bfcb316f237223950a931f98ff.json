{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n    this.currentUser = this.currentUserSubject.asObservable();\n    // Check if there's a stored token or other auth state\n    const hasToken = localStorage.getItem('auth_token');\n    this.isAuthenticatedSubject.next(!!hasToken);\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(email, password) {\n    return this.http.post(`${environment.apiUrl}/auth/login`, {\n      email,\n      password\n    }).pipe(map(user => {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      localStorage.setItem('auth_token', 'dummy_token');\n      this.currentUserSubject.next(user);\n      this.isAuthenticatedSubject.next(true);\n      return user;\n    }));\n  }\n  register(user) {\n    return this.http.post(`${environment.apiUrl}/auth/register`, user);\n  }\n  verifyEmail(token) {\n    return this.http.post(`${environment.apiUrl}/auth/verify-email`, {\n      token\n    });\n  }\n  forgotPassword(email) {\n    return this.http.post(`${environment.apiUrl}/auth/forgot-password`, {\n      email\n    });\n  }\n  resetPassword(token, password) {\n    return this.http.post(`${environment.apiUrl}/auth/reset-password`, {\n      token,\n      password\n    });\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.isAuthenticatedSubject.next(false);\n  }\n  updateProfile(id, changes) {\n    return this.http.put(`${environment.apiUrl}/users/${id}`, changes).pipe(map(user => {\n      if (user) {\n        const updatedUser = {\n          ...this.currentUserValue,\n          ...user\n        };\n        localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n        this.currentUserSubject.next(updatedUser);\n      }\n      return user;\n    }));\n  }\n  isAuthenticated() {\n    return this.isAuthenticatedSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","environment","AuthService","constructor","http","isAuthenticatedSubject","isAuthenticated$","asObservable","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","hasToken","next","currentUserValue","value","login","email","password","post","apiUrl","pipe","user","setItem","stringify","register","verifyEmail","token","forgotPassword","resetPassword","logout","removeItem","updateProfile","id","changes","put","updatedUser","isAuthenticated","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rambo\\OneDrive\\Desktop\\cudillo-frontend\\frontend-cudillo\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { User } from '../models/user.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject: BehaviorSubject<User | null>;\r\n  public currentUser: Observable<User | null>;\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.currentUserSubject = new BehaviorSubject<User | null>(\r\n      JSON.parse(localStorage.getItem('currentUser') || 'null')\r\n    );\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n\r\n    // Check if there's a stored token or other auth state\r\n    const hasToken = localStorage.getItem('auth_token');\r\n    this.isAuthenticatedSubject.next(!!hasToken);\r\n  }\r\n\r\n  public get currentUserValue(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    return this.http.post<User>(`${environment.apiUrl}/auth/login`, { email, password })\r\n      .pipe(map(user => {\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n        localStorage.setItem('auth_token', 'dummy_token');\r\n        this.currentUserSubject.next(user);\r\n        this.isAuthenticatedSubject.next(true);\r\n        return user;\r\n      }));\r\n  }\r\n\r\n  register(user: {email: string, password: string, firstName: string, lastName: string}) {\r\n    return this.http.post(`${environment.apiUrl}/auth/register`, user);\r\n  }\r\n\r\n  verifyEmail(token: string) {\r\n    return this.http.post(`${environment.apiUrl}/auth/verify-email`, { token });\r\n  }\r\n\r\n  forgotPassword(email: string) {\r\n    return this.http.post(`${environment.apiUrl}/auth/forgot-password`, { email });\r\n  }\r\n\r\n  resetPassword(token: string, password: string) {\r\n    return this.http.post(`${environment.apiUrl}/auth/reset-password`, { token, password });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('auth_token');\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n\r\n  updateProfile(id: number, changes: Partial<User>) {\r\n    return this.http.put<User>(`${environment.apiUrl}/users/${id}`, changes)\r\n      .pipe(map(user => {\r\n        if (user) {\r\n          const updatedUser = { ...this.currentUserValue, ...user } as User;\r\n          localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n          this.currentUserSubject.next(updatedUser);\r\n        }\r\n        return user;\r\n      }));\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}