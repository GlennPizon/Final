{"ast":null,"code":"/**\r\n * @license Angular v19.2.11\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport * as i3 from '@angular/common';\nimport { LOCATION_INITIALIZED, HashLocationStrategy, LocationStrategy, ViewportScroller, Location, PathLocationStrategy } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵRuntimeError as _RuntimeError, ɵɵsanitizeUrlOrResourceUrl as __sanitizeUrlOrResourceUrl, booleanAttribute, HostListener, Input, HostBinding, Attribute, Directive, EventEmitter, Output, ContentChildren, Optional, createEnvironmentInjector, Injectable, InjectionToken, ɵperformanceMarkFeature as _performanceMarkFeature, makeEnvironmentProviders, APP_BOOTSTRAP_LISTENER, ENVIRONMENT_INITIALIZER, provideAppInitializer, inject, Injector, ApplicationRef, InjectFlags, NgZone, SkipSelf, NgModule } from '@angular/core';\nimport { NavigationEnd, isUrlTree, Router, ActivatedRoute, RouterConfigLoader, NavigationStart, NavigationSkipped, NavigationSkippedCode, Scroll, UrlSerializer, NavigationTransitions, ROUTES, afterNextNavigation, ROUTER_CONFIGURATION, NAVIGATION_ERROR_HANDLER, RoutedComponentInputBinder, INPUT_BINDER, createViewTransition, CREATE_VIEW_TRANSITION, VIEW_TRANSITION_OPTIONS, stringifyEvent, DefaultUrlSerializer, ChildrenOutletContexts, RouterOutlet, ɵEmptyOutletComponent as _EmptyOutletComponent } from './router-Dwfin5Au.mjs';\nimport { Subject, of, from } from 'rxjs';\nimport { mergeAll, catchError, filter, concatMap, mergeMap } from 'rxjs/operators';\n\n/**\r\n * @description\r\n *\r\n * When applied to an element in a template, makes that element a link\r\n * that initiates navigation to a route. Navigation opens one or more routed components\r\n * in one or more `<router-outlet>` locations on the page.\r\n *\r\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\r\n * the following creates a static link to the route:\r\n * `<a routerLink=\"/user/bob\">link to user component</a>`\r\n *\r\n * You can use dynamic values to generate the link.\r\n * For a dynamic link, pass an array of path segments,\r\n * followed by the params for each segment.\r\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\r\n * generates a link to `/team/11/user/bob;details=true`.\r\n *\r\n * Multiple static segments can be merged into one term and combined with dynamic segments.\r\n * For example, `['/team/11/user', userName, {details: true}]`\r\n *\r\n * The input that you provide to the link is treated as a delta to the current URL.\r\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\r\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\r\n * `/user/(jim//aux:team)`.\r\n * See {@link Router#createUrlTree} for more information.\r\n *\r\n * @usageNotes\r\n *\r\n * You can use absolute or relative paths in a link, set query parameters,\r\n * control how parameters are handled, and keep a history of navigation states.\r\n *\r\n * ### Relative link paths\r\n *\r\n * The first segment name can be prepended with `/`, `./`, or `../`.\r\n * * If the first segment begins with `/`, the router looks up the route from the root of the\r\n *   app.\r\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\r\n *   looks in the children of the current activated route.\r\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\r\n *\r\n * ### Setting and handling query params and fragments\r\n *\r\n * The following link adds a query parameter and a fragment to the generated URL:\r\n *\r\n * ```html\r\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n * By default, the directive constructs the new URL using the given query parameters.\r\n * The example generates the link: `/user/bob?debug=true#education`.\r\n *\r\n * You can instruct the directive to handle query parameters differently\r\n * by specifying the `queryParamsHandling` option in the link.\r\n * Allowed values are:\r\n *\r\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\r\n *  - `'preserve'`: Preserve the current query params.\r\n *\r\n * For example:\r\n *\r\n * ```html\r\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n *\r\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\r\n * cannot be used when the `routerLink` input is a `UrlTree`.\r\n *\r\n * See {@link UrlCreationOptions#queryParamsHandling}.\r\n *\r\n * ### Preserving navigation history\r\n *\r\n * You can provide a `state` value to be persisted to the browser's\r\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\r\n * For example:\r\n *\r\n * ```html\r\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n *\r\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\r\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\r\n * event:\r\n *\r\n * ```ts\r\n * // Get NavigationStart events\r\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\r\n *   const navigation = router.getCurrentNavigation();\r\n *   tracingService.trace({id: navigation.extras.state.tracingId});\r\n * });\r\n * ```\r\n *\r\n * @ngModule RouterModule\r\n *\r\n * @publicApi\r\n */\nclass RouterLink {\n  router;\n  route;\n  tabIndexAttribute;\n  renderer;\n  el;\n  locationStrategy;\n  /**\r\n   * Represents an `href` attribute value applied to a host element,\r\n   * when a host element is `<a>`. For other tags, the value is `null`.\r\n   */\n  href = null;\n  /**\r\n   * Represents the `target` attribute on a host element.\r\n   * This is only used when the host element is an `<a>` tag.\r\n   */\n  target;\n  /**\r\n   * Passed to {@link Router#createUrlTree} as part of the\r\n   * `UrlCreationOptions`.\r\n   * @see {@link UrlCreationOptions#queryParams}\r\n   * @see {@link Router#createUrlTree}\r\n   */\n  queryParams;\n  /**\r\n   * Passed to {@link Router#createUrlTree} as part of the\r\n   * `UrlCreationOptions`.\r\n   * @see {@link UrlCreationOptions#fragment}\r\n   * @see {@link Router#createUrlTree}\r\n   */\n  fragment;\n  /**\r\n   * Passed to {@link Router#createUrlTree} as part of the\r\n   * `UrlCreationOptions`.\r\n   * @see {@link UrlCreationOptions#queryParamsHandling}\r\n   * @see {@link Router#createUrlTree}\r\n   */\n  queryParamsHandling;\n  /**\r\n   * Passed to {@link Router#navigateByUrl} as part of the\r\n   * `NavigationBehaviorOptions`.\r\n   * @see {@link NavigationBehaviorOptions#state}\r\n   * @see {@link Router#navigateByUrl}\r\n   */\n  state;\n  /**\r\n   * Passed to {@link Router#navigateByUrl} as part of the\r\n   * `NavigationBehaviorOptions`.\r\n   * @see {@link NavigationBehaviorOptions#info}\r\n   * @see {@link Router#navigateByUrl}\r\n   */\n  info;\n  /**\r\n   * Passed to {@link Router#createUrlTree} as part of the\r\n   * `UrlCreationOptions`.\r\n   * Specify a value here when you do not want to use the default value\r\n   * for `routerLink`, which is the current activated route.\r\n   * Note that a value of `undefined` here will use the `routerLink` default.\r\n   * @see {@link UrlCreationOptions#relativeTo}\r\n   * @see {@link Router#createUrlTree}\r\n   */\n  relativeTo;\n  /** Whether a host element is an `<a>` tag. */\n  isAnchorElement;\n  subscription;\n  /** @internal */\n  onChanges = new Subject();\n  constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {\n    this.router = router;\n    this.route = route;\n    this.tabIndexAttribute = tabIndexAttribute;\n    this.renderer = renderer;\n    this.el = el;\n    this.locationStrategy = locationStrategy;\n    const tagName = el.nativeElement.tagName?.toLowerCase();\n    this.isAnchorElement = tagName === 'a' || tagName === 'area';\n    if (this.isAnchorElement) {\n      this.subscription = router.events.subscribe(s => {\n        if (s instanceof NavigationEnd) {\n          this.updateHref();\n        }\n      });\n    } else {\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n  /**\r\n   * Passed to {@link Router#createUrlTree} as part of the\r\n   * `UrlCreationOptions`.\r\n   * @see {@link UrlCreationOptions#preserveFragment}\r\n   * @see {@link Router#createUrlTree}\r\n   */\n  preserveFragment = false;\n  /**\r\n   * Passed to {@link Router#navigateByUrl} as part of the\r\n   * `NavigationBehaviorOptions`.\r\n   * @see {@link NavigationBehaviorOptions#skipLocationChange}\r\n   * @see {@link Router#navigateByUrl}\r\n   */\n  skipLocationChange = false;\n  /**\r\n   * Passed to {@link Router#navigateByUrl} as part of the\r\n   * `NavigationBehaviorOptions`.\r\n   * @see {@link NavigationBehaviorOptions#replaceUrl}\r\n   * @see {@link Router#navigateByUrl}\r\n   */\n  replaceUrl = false;\n  /**\r\n   * Modifies the tab index if there was not a tabindex attribute on the element during\r\n   * instantiation.\r\n   */\n  setTabIndexIfNotOnNativeEl(newTabIndex) {\n    if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n      return;\n    }\n    this.applyAttributeValue('tabindex', newTabIndex);\n  }\n  /** @docs-private */\n  // TODO(atscott): Remove changes parameter in major version as a breaking change.\n  ngOnChanges(changes) {\n    if (ngDevMode && isUrlTree(this.routerLinkInput) && (this.fragment !== undefined || this.queryParams || this.queryParamsHandling || this.preserveFragment || this.relativeTo)) {\n      throw new _RuntimeError(4016 /* RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS */, 'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.');\n    }\n    if (this.isAnchorElement) {\n      this.updateHref();\n    }\n    // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n    // to the RouterLinks it's tracking.\n    this.onChanges.next(this);\n  }\n  routerLinkInput = null;\n  /**\r\n   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\r\n   *   - **array**: commands to pass to {@link Router#createUrlTree}.\r\n   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\r\n   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\r\n   *     and other inputs that correspond to properties of `UrlCreationOptions`.\r\n   *   - **null|undefined**: effectively disables the `routerLink`\r\n   * @see {@link Router#createUrlTree}\r\n   */\n  set routerLink(commandsOrUrlTree) {\n    if (commandsOrUrlTree == null) {\n      this.routerLinkInput = null;\n      this.setTabIndexIfNotOnNativeEl(null);\n    } else {\n      if (isUrlTree(commandsOrUrlTree)) {\n        this.routerLinkInput = commandsOrUrlTree;\n      } else {\n        this.routerLinkInput = Array.isArray(commandsOrUrlTree) ? commandsOrUrlTree : [commandsOrUrlTree];\n      }\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n  /** @docs-private */\n  onClick(button, ctrlKey, shiftKey, altKey, metaKey) {\n    const urlTree = this.urlTree;\n    if (urlTree === null) {\n      return true;\n    }\n    if (this.isAnchorElement) {\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n      if (typeof this.target === 'string' && this.target != '_self') {\n        return true;\n      }\n    }\n    const extras = {\n      skipLocationChange: this.skipLocationChange,\n      replaceUrl: this.replaceUrl,\n      state: this.state,\n      info: this.info\n    };\n    this.router.navigateByUrl(urlTree, extras);\n    // Return `false` for `<a>` elements to prevent default action\n    // and cancel the native behavior, since the navigation is handled\n    // by the Router.\n    return !this.isAnchorElement;\n  }\n  /** @docs-private */\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n  updateHref() {\n    const urlTree = this.urlTree;\n    this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;\n    const sanitizedValue = this.href === null ? null :\n    // This class represents a directive that can be added to both `<a>` elements,\n    // as well as other elements. As a result, we can't define security context at\n    // compile time. So the security context is deferred to runtime.\n    // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function\n    // based on the tag and property names. The logic mimics the one from\n    // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.\n    //\n    // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`\n    // instead of applying a value via a renderer, after a final merge of the\n    // `RouterLinkWithHref` directive.\n    __sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), 'href');\n    this.applyAttributeValue('href', sanitizedValue);\n  }\n  applyAttributeValue(attrName, attrValue) {\n    const renderer = this.renderer;\n    const nativeElement = this.el.nativeElement;\n    if (attrValue !== null) {\n      renderer.setAttribute(nativeElement, attrName, attrValue);\n    } else {\n      renderer.removeAttribute(nativeElement, attrName);\n    }\n  }\n  get urlTree() {\n    if (this.routerLinkInput === null) {\n      return null;\n    } else if (isUrlTree(this.routerLinkInput)) {\n      return this.routerLinkInput;\n    }\n    return this.router.createUrlTree(this.routerLinkInput, {\n      // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n      // Otherwise, we should use the value provided by the user in the input.\n      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: this.preserveFragment\n    });\n  }\n  static ɵfac = function RouterLink_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterLink)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(ActivatedRoute), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.LocationStrategy));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RouterLink,\n    selectors: [[\"\", \"routerLink\", \"\"]],\n    hostVars: 1,\n    hostBindings: function RouterLink_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function RouterLink_click_HostBindingHandler($event) {\n          return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"target\", ctx.target);\n      }\n    },\n    inputs: {\n      target: \"target\",\n      queryParams: \"queryParams\",\n      fragment: \"fragment\",\n      queryParamsHandling: \"queryParamsHandling\",\n      state: \"state\",\n      info: \"info\",\n      relativeTo: \"relativeTo\",\n      preserveFragment: [2, \"preserveFragment\", \"preserveFragment\", booleanAttribute],\n      skipLocationChange: [2, \"skipLocationChange\", \"skipLocationChange\", booleanAttribute],\n      replaceUrl: [2, \"replaceUrl\", \"replaceUrl\", booleanAttribute],\n      routerLink: \"routerLink\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterLink, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLink]'\n    }]\n  }], () => [{\n    type: Router\n  }, {\n    type: ActivatedRoute\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i3.LocationStrategy\n  }], {\n    target: [{\n      type: HostBinding,\n      args: ['attr.target']\n    }, {\n      type: Input\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    fragment: [{\n      type: Input\n    }],\n    queryParamsHandling: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    info: [{\n      type: Input\n    }],\n    relativeTo: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    skipLocationChange: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    replaceUrl: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    routerLink: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey']]\n    }]\n  });\n})();\n\n/**\r\n *\r\n * @description\r\n *\r\n * Tracks whether the linked route of an element is currently active, and allows you\r\n * to specify one or more CSS classes to add to the element when the linked route\r\n * is active.\r\n *\r\n * Use this directive to create a visual distinction for elements associated with an active route.\r\n * For example, the following code highlights the word \"Bob\" when the router\r\n * activates the associated route:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\r\n * ```\r\n *\r\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\r\n * added to the anchor tag. If the URL changes, the class is removed.\r\n *\r\n * You can set more than one class using a space-separated string or an array.\r\n * For example:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\r\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\r\n * ```\r\n *\r\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\r\n * true}\">Bob</a>\r\n * ```\r\n *\r\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\r\n * instance to a template variable.\r\n * For example, the following checks the status without assigning any CSS classes:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\r\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\r\n * </a>\r\n * ```\r\n *\r\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\r\n * For example, the following sets the active-link class on the `<div>`  parent tag\r\n * when the URL is either '/user/jim' or '/user/bob'.\r\n *\r\n * ```html\r\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\r\n *   <a routerLink=\"/user/jim\">Jim</a>\r\n *   <a routerLink=\"/user/bob\">Bob</a>\r\n * </div>\r\n * ```\r\n *\r\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\r\n * to provide an alternative distinction for active elements to visually impaired users.\r\n *\r\n * For example, the following code adds the 'active' class to the Home Page link when it is\r\n * indeed active and in such case also sets its aria-current attribute to 'page':\r\n *\r\n * ```html\r\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\r\n * ```\r\n *\r\n * @ngModule RouterModule\r\n *\r\n * @publicApi\r\n */\nclass RouterLinkActive {\n  router;\n  element;\n  renderer;\n  cdr;\n  link;\n  links;\n  classes = [];\n  routerEventsSubscription;\n  linkInputChangesSubscription;\n  _isActive = false;\n  get isActive() {\n    return this._isActive;\n  }\n  /**\r\n   * Options to configure how to determine if the router link is active.\r\n   *\r\n   * These options are passed to the `Router.isActive()` function.\r\n   *\r\n   * @see {@link Router#isActive}\r\n   */\n  routerLinkActiveOptions = {\n    exact: false\n  };\n  /**\r\n   * Aria-current attribute to apply when the router link is active.\r\n   *\r\n   * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\r\n   *\r\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\r\n   */\n  ariaCurrentWhenActive;\n  /**\r\n   *\r\n   * You can use the output `isActiveChange` to get notified each time the link becomes\r\n   * active or inactive.\r\n   *\r\n   * Emits:\r\n   * true  -> Route is active\r\n   * false -> Route is inactive\r\n   *\r\n   * ```html\r\n   * <a\r\n   *  routerLink=\"/user/bob\"\r\n   *  routerLinkActive=\"active-link\"\r\n   *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\r\n   * ```\r\n   */\n  isActiveChange = new EventEmitter();\n  constructor(router, element, renderer, cdr, link) {\n    this.router = router;\n    this.element = element;\n    this.renderer = renderer;\n    this.cdr = cdr;\n    this.link = link;\n    this.routerEventsSubscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n  /** @docs-private */\n  ngAfterContentInit() {\n    // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n    of(this.links.changes, of(null)).pipe(mergeAll()).subscribe(_ => {\n      this.update();\n      this.subscribeToEachLinkOnChanges();\n    });\n  }\n  subscribeToEachLinkOnChanges() {\n    this.linkInputChangesSubscription?.unsubscribe();\n    const allLinkChanges = [...this.links.toArray(), this.link].filter(link => !!link).map(link => link.onChanges);\n    this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe(link => {\n      if (this._isActive !== this.isLinkActive(this.router)(link)) {\n        this.update();\n      }\n    });\n  }\n  set routerLinkActive(data) {\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n  /** @docs-private */\n  ngOnChanges(changes) {\n    this.update();\n  }\n  /** @docs-private */\n  ngOnDestroy() {\n    this.routerEventsSubscription.unsubscribe();\n    this.linkInputChangesSubscription?.unsubscribe();\n  }\n  update() {\n    if (!this.links || !this.router.navigated) return;\n    queueMicrotask(() => {\n      const hasActiveLinks = this.hasActiveLinks();\n      this.classes.forEach(c => {\n        if (hasActiveLinks) {\n          this.renderer.addClass(this.element.nativeElement, c);\n        } else {\n          this.renderer.removeClass(this.element.nativeElement, c);\n        }\n      });\n      if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n        this.renderer.setAttribute(this.element.nativeElement, 'aria-current', this.ariaCurrentWhenActive.toString());\n      } else {\n        this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n      }\n      // Only emit change if the active state changed.\n      if (this._isActive !== hasActiveLinks) {\n        this._isActive = hasActiveLinks;\n        this.cdr.markForCheck();\n        // Emit on isActiveChange after classes are updated\n        this.isActiveChange.emit(hasActiveLinks);\n      }\n    });\n  }\n  isLinkActive(router) {\n    const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions :\n    // While the types should disallow `undefined` here, it's possible without strict inputs\n    this.routerLinkActiveOptions.exact || false;\n    return link => {\n      const urlTree = link.urlTree;\n      return urlTree ? router.isActive(urlTree, options) : false;\n    };\n  }\n  hasActiveLinks() {\n    const isActiveCheckFn = this.isLinkActive(this.router);\n    return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);\n  }\n  static ɵfac = function RouterLinkActive_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterLinkActive)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(RouterLink, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RouterLinkActive,\n    selectors: [[\"\", \"routerLinkActive\", \"\"]],\n    contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, RouterLink, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n      }\n    },\n    inputs: {\n      routerLinkActiveOptions: \"routerLinkActiveOptions\",\n      ariaCurrentWhenActive: \"ariaCurrentWhenActive\",\n      routerLinkActive: \"routerLinkActive\"\n    },\n    outputs: {\n      isActiveChange: \"isActiveChange\"\n    },\n    exportAs: [\"routerLinkActive\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterLinkActive, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLinkActive]',\n      exportAs: 'routerLinkActive'\n    }]\n  }], () => [{\n    type: Router\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: RouterLink,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    links: [{\n      type: ContentChildren,\n      args: [RouterLink, {\n        descendants: true\n      }]\n    }],\n    routerLinkActiveOptions: [{\n      type: Input\n    }],\n    ariaCurrentWhenActive: [{\n      type: Input\n    }],\n    isActiveChange: [{\n      type: Output\n    }],\n    routerLinkActive: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * Use instead of `'paths' in options` to be compatible with property renaming\r\n */\nfunction isActiveMatchOptions(options) {\n  return !!options.paths;\n}\n\n/**\r\n * @description\r\n *\r\n * Provides a preloading strategy.\r\n *\r\n * @publicApi\r\n */\nclass PreloadingStrategy {}\n/**\r\n * @description\r\n *\r\n * Provides a preloading strategy that preloads all modules as quickly as possible.\r\n *\r\n * ```ts\r\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass PreloadAllModules {\n  preload(route, fn) {\n    return fn().pipe(catchError(() => of(null)));\n  }\n  static ɵfac = function PreloadAllModules_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PreloadAllModules)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PreloadAllModules,\n    factory: PreloadAllModules.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PreloadAllModules, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\r\n * @description\r\n *\r\n * Provides a preloading strategy that does not preload any modules.\r\n *\r\n * This strategy is enabled by default.\r\n *\r\n * @publicApi\r\n */\nclass NoPreloading {\n  preload(route, fn) {\n    return of(null);\n  }\n  static ɵfac = function NoPreloading_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NoPreloading)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NoPreloading,\n    factory: NoPreloading.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoPreloading, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\r\n * The preloader optimistically loads all router configurations to\r\n * make navigations into lazily-loaded sections of the application faster.\r\n *\r\n * The preloader runs in the background. When the router bootstraps, the preloader\r\n * starts listening to all navigation events. After every such event, the preloader\r\n * will check if any configurations can be loaded lazily.\r\n *\r\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\r\n *\r\n * @publicApi\r\n */\nclass RouterPreloader {\n  router;\n  injector;\n  preloadingStrategy;\n  loader;\n  subscription;\n  constructor(router, injector, preloadingStrategy, loader) {\n    this.router = router;\n    this.injector = injector;\n    this.preloadingStrategy = preloadingStrategy;\n    this.loader = loader;\n  }\n  setUpPreloading() {\n    this.subscription = this.router.events.pipe(filter(e => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {});\n  }\n  preload() {\n    return this.processRoutes(this.injector, this.router.config);\n  }\n  /** @docs-private */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  processRoutes(injector, routes) {\n    const res = [];\n    for (const route of routes) {\n      if (route.providers && !route._injector) {\n        route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);\n      }\n      const injectorForCurrentRoute = route._injector ?? injector;\n      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n      // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n      // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n      // happens as a consequence of needing to descend into children for route matching immediately\n      // while component loading is deferred until route activation. Because `canLoad` guards can\n      // have side effects, we cannot execute them here so we instead skip preloading altogether\n      // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n      // at all. Code splitting and lazy loading is separate from client-side authorization checks\n      // and should not be used as a security measure to prevent loading of code.\n      if (route.loadChildren && !route._loadedRoutes && route.canLoad === undefined || route.loadComponent && !route._loadedComponent) {\n        res.push(this.preloadConfig(injectorForCurrentRoute, route));\n      }\n      if (route.children || route._loadedRoutes) {\n        res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));\n      }\n    }\n    return from(res).pipe(mergeAll());\n  }\n  preloadConfig(injector, route) {\n    return this.preloadingStrategy.preload(route, () => {\n      let loadedChildren$;\n      if (route.loadChildren && route.canLoad === undefined) {\n        loadedChildren$ = this.loader.loadChildren(injector, route);\n      } else {\n        loadedChildren$ = of(null);\n      }\n      const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap(config => {\n        if (config === null) {\n          return of(void 0);\n        }\n        route._loadedRoutes = config.routes;\n        route._loadedInjector = config.injector;\n        // If the loaded config was a module, use that as the module/module injector going\n        // forward. Otherwise, continue using the current module/module injector.\n        return this.processRoutes(config.injector ?? injector, config.routes);\n      }));\n      if (route.loadComponent && !route._loadedComponent) {\n        const loadComponent$ = this.loader.loadComponent(route);\n        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n      } else {\n        return recursiveLoadChildren$;\n      }\n    });\n  }\n  static ɵfac = function RouterPreloader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterPreloader)(i0.ɵɵinject(Router), i0.ɵɵinject(i0.EnvironmentInjector), i0.ɵɵinject(PreloadingStrategy), i0.ɵɵinject(RouterConfigLoader));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RouterPreloader,\n    factory: RouterPreloader.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterPreloader, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: Router\n  }, {\n    type: i0.EnvironmentInjector\n  }, {\n    type: PreloadingStrategy\n  }, {\n    type: RouterConfigLoader\n  }], null);\n})();\nconst ROUTER_SCROLLER = new InjectionToken('');\nclass RouterScroller {\n  urlSerializer;\n  transitions;\n  viewportScroller;\n  zone;\n  options;\n  routerEventsSubscription;\n  scrollEventsSubscription;\n  lastId = 0;\n  lastSource = 'imperative';\n  restoredId = 0;\n  store = {};\n  /** @docs-private */\n  constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {\n    this.urlSerializer = urlSerializer;\n    this.transitions = transitions;\n    this.viewportScroller = viewportScroller;\n    this.zone = zone;\n    this.options = options;\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration ||= 'disabled';\n    options.anchorScrolling ||= 'disabled';\n  }\n  init() {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n  createScrollEvents() {\n    return this.transitions.events.subscribe(e => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n      } else if (e instanceof NavigationSkipped && e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {\n        this.lastSource = undefined;\n        this.restoredId = 0;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n      }\n    });\n  }\n  consumeScrollEvents() {\n    return this.transitions.events.subscribe(e => {\n      if (!(e instanceof Scroll)) return;\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n  scheduleScrollEvent(routerEvent, anchor) {\n    this.zone.runOutsideAngular(() => {\n      // The scroll event needs to be delayed until after change detection. Otherwise, we may\n      // attempt to restore the scroll position before the router outlet has fully rendered the\n      // component by executing its update block of the template function.\n      setTimeout(() => {\n        this.zone.run(() => {\n          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n        });\n      }, 0);\n    });\n  }\n  /** @docs-private */\n  ngOnDestroy() {\n    this.routerEventsSubscription?.unsubscribe();\n    this.scrollEventsSubscription?.unsubscribe();\n  }\n  static ɵfac = function RouterScroller_Factory(__ngFactoryType__) {\n    i0.ɵɵinvalidFactory();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RouterScroller,\n    factory: RouterScroller.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterScroller, [{\n    type: Injectable\n  }], () => [{\n    type: UrlSerializer\n  }, {\n    type: NavigationTransitions\n  }, {\n    type: i3.ViewportScroller\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined\n  }], null);\n})();\n\n/**\r\n * Sets up providers necessary to enable `Router` functionality for the application.\r\n * Allows to configure a set of routes as well as extra features that should be enabled.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can add a Router to your application:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [provideRouter(appRoutes)]\r\n * });\r\n * ```\r\n *\r\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\r\n * type:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes,\r\n *         withDebugTracing(),\r\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link RouterFeatures}\r\n *\r\n * @publicApi\r\n * @param routes A set of `Route`s to use for the application routing table.\r\n * @param features Optional features to configure additional router behaviors.\r\n * @returns A set of providers to setup a Router.\r\n */\nfunction provideRouter(routes, ...features) {\n  return makeEnvironmentProviders([{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n    provide: ROUTER_IS_PROVIDED,\n    useValue: true\n  } : [], {\n    provide: ActivatedRoute,\n    useFactory: rootRoute,\n    deps: [Router]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: getBootstrapListener\n  }, features.map(feature => feature.ɵproviders)]);\n}\nfunction rootRoute(router) {\n  return router.routerState.root;\n}\n/**\r\n * Helper function to create an object that represents a Router feature.\r\n */\nfunction routerFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\r\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\r\n * called.\r\n */\nconst ROUTER_IS_PROVIDED = new InjectionToken('', {\n  providedIn: 'root',\n  factory: () => false\n});\nconst routerIsProvidedDevModeCheck = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => {\n      if (!inject(ROUTER_IS_PROVIDED)) {\n        console.warn('`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' + 'This is likely a mistake.');\n      }\n    };\n  }\n};\n/**\r\n * Registers a DI provider for a set of routes.\r\n * @param routes The route configuration to provide.\r\n *\r\n * @usageNotes\r\n *\r\n * ```ts\r\n * @NgModule({\r\n *   providers: [provideRoutes(ROUTES)]\r\n * })\r\n * class LazyLoadedChildModule {}\r\n * ```\r\n *\r\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\r\n * @see {@link ROUTES}\r\n * @publicApi\r\n */\nfunction provideRoutes(routes) {\n  return [{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : []];\n}\n/**\r\n * Enables customizable scrolling behavior for router navigations.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable scrolling feature:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withInMemoryScrolling())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n * @see {@link ViewportScroller}\r\n *\r\n * @publicApi\r\n * @param options Set of configuration parameters to customize scrolling behavior, see\r\n *     `InMemoryScrollingOptions` for additional information.\r\n * @returns A set of providers for use with `provideRouter`.\r\n */\nfunction withInMemoryScrolling(options = {}) {\n  const providers = [{\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n    }\n  }];\n  return routerFeature(4 /* RouterFeatureKind.InMemoryScrollingFeature */, providers);\n}\nfunction getBootstrapListener() {\n  const injector = inject(Injector);\n  return bootstrappedComponentRef => {\n    const ref = injector.get(ApplicationRef);\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n    const router = injector.get(Router);\n    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n    if (injector.get(INITIAL_NAVIGATION) === 1 /* InitialNavigation.EnabledNonBlocking */) {\n      router.initialNavigation();\n    }\n    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();\n    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    if (!bootstrapDone.closed) {\n      bootstrapDone.next();\n      bootstrapDone.complete();\n      bootstrapDone.unsubscribe();\n    }\n  };\n}\n/**\r\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\r\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\r\n * to the activation phase.\r\n */\nconst BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '', {\n  factory: () => {\n    return new Subject();\n  }\n});\nconst INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '', {\n  providedIn: 'root',\n  factory: () => 1 /* InitialNavigation.EnabledNonBlocking */\n});\n/**\r\n * Configures initial navigation to start before the root component is created.\r\n *\r\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\r\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\r\n * your application.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable this navigation behavior:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @publicApi\r\n * @returns A set of providers for use with `provideRouter`.\r\n */\nfunction withEnabledBlockingInitialNavigation() {\n  const providers = [{\n    provide: INITIAL_NAVIGATION,\n    useValue: 0 /* InitialNavigation.EnabledBlocking */\n  }, provideAppInitializer(() => {\n    const injector = inject(Injector);\n    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());\n    return locationInitialized.then(() => {\n      return new Promise(resolve => {\n        const router = injector.get(Router);\n        const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n        afterNextNavigation(router, () => {\n          // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n          // without a redirect.\n          resolve(true);\n        });\n        injector.get(NavigationTransitions).afterPreactivation = () => {\n          // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n          // assume activation will complete successfully (even though this is not\n          // guaranteed).\n          resolve(true);\n          return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n        };\n        router.initialNavigation();\n      });\n    });\n  })];\n  return routerFeature(2 /* RouterFeatureKind.EnabledBlockingInitialNavigationFeature */, providers);\n}\n/**\r\n * Disables initial navigation.\r\n *\r\n * Use if there is a reason to have more control over when the router starts its initial navigation\r\n * due to some complex initialization logic.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can disable initial navigation:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\nfunction withDisabledInitialNavigation() {\n  const providers = [provideAppInitializer(() => {\n    inject(Router).setUpLocationChangeListener();\n  }), {\n    provide: INITIAL_NAVIGATION,\n    useValue: 2 /* InitialNavigation.Disabled */\n  }];\n  return routerFeature(3 /* RouterFeatureKind.DisabledInitialNavigationFeature */, providers);\n}\n/**\r\n * Enables logging of all internal navigation events to the console.\r\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable debug tracing:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withDebugTracing())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\nfunction withDebugTracing() {\n  let providers = [];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    providers = [{\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const router = inject(Router);\n        return () => router.events.subscribe(e => {\n          // tslint:disable:no-console\n          console.group?.(`Router Event: ${e.constructor.name}`);\n          console.log(stringifyEvent(e));\n          console.log(e);\n          console.groupEnd?.();\n          // tslint:enable:no-console\n        });\n      }\n    }];\n  } else {\n    providers = [];\n  }\n  return routerFeature(1 /* RouterFeatureKind.DebugTracingFeature */, providers);\n}\nconst ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '');\n/**\r\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\r\n * reference to a class that implements a `PreloadingStrategy`.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can configure preloading:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\r\n *     should be used.\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\nfunction withPreloading(preloadingStrategy) {\n  const providers = [{\n    provide: ROUTER_PRELOADER,\n    useExisting: RouterPreloader\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: preloadingStrategy\n  }];\n  return routerFeature(0 /* RouterFeatureKind.PreloadingFeature */, providers);\n}\n/**\r\n * Allows to provide extra parameters to configure Router.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can provide extra configuration options:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withRouterConfig({\r\n *          onSameUrlNavigation: 'reload'\r\n *       }))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\r\n *     additional information.\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\nfunction withRouterConfig(options) {\n  const providers = [{\n    provide: ROUTER_CONFIGURATION,\n    useValue: options\n  }];\n  return routerFeature(5 /* RouterFeatureKind.RouterConfigurationFeature */, providers);\n}\n/**\r\n * Provides the location strategy that uses the URL fragment instead of the history API.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can use the hash location option:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withHashLocation())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\nfunction withHashLocation() {\n  const providers = [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }];\n  return routerFeature(6 /* RouterFeatureKind.RouterHashLocationFeature */, providers);\n}\n/**\r\n * Provides a function which is called when a navigation error occurs.\r\n *\r\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\r\n * so you can use the [`inject`](api/core/inject) function.\r\n *\r\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\r\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\r\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\r\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\r\n * how the `Router` handles the error.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can use the error handler option:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\r\n * inject(MyErrorTracker).trackError(e)))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link NavigationError}\r\n * @see {@link /api/core/inject inject}\r\n * @see {@link runInInjectionContext}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\nfunction withNavigationErrorHandler(handler) {\n  const providers = [{\n    provide: NAVIGATION_ERROR_HANDLER,\n    useValue: handler\n  }];\n  return routerFeature(7 /* RouterFeatureKind.NavigationErrorHandlerFeature */, providers);\n}\n/**\r\n * Enables binding information from the `Router` state directly to the inputs of the component in\r\n * `Route` configurations.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable the feature:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withComponentInputBinding())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * The router bindings information from any of the following sources:\r\n *\r\n *  - query parameters\r\n *  - path and matrix parameters\r\n *  - static route data\r\n *  - data from resolvers\r\n *\r\n * Duplicate keys are resolved in the same order from above, from least to greatest,\r\n * meaning that resolvers have the highest precedence and override any of the other information\r\n * from the route.\r\n *\r\n * Importantly, when an input does not have an item in the route data with a matching key, this\r\n * input is set to `undefined`. This prevents previous information from being\r\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\r\n * Default values can be provided with a resolver on the route to ensure the value is always present\r\n * or an input and use an input transform in the component.\r\n *\r\n * @see {@link /guide/components/inputs#input-transforms Input Transforms}\r\n * @returns A set of providers for use with `provideRouter`.\r\n */\nfunction withComponentInputBinding() {\n  const providers = [RoutedComponentInputBinder, {\n    provide: INPUT_BINDER,\n    useExisting: RoutedComponentInputBinder\n  }];\n  return routerFeature(8 /* RouterFeatureKind.ComponentInputBindingFeature */, providers);\n}\n/**\r\n * Enables view transitions in the Router by running the route activation and deactivation inside of\r\n * `document.startViewTransition`.\r\n *\r\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\r\n * view transitions, the Router will not attempt to start a view transition and continue processing\r\n * the navigation as usual.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable the feature:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withViewTransitions())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\r\n * @developerPreview\r\n */\nfunction withViewTransitions(options) {\n  _performanceMarkFeature('NgRouterViewTransitions');\n  const providers = [{\n    provide: CREATE_VIEW_TRANSITION,\n    useValue: createViewTransition\n  }, {\n    provide: VIEW_TRANSITION_OPTIONS,\n    useValue: {\n      skipNextTransition: !!options?.skipInitialTransition,\n      ...options\n    }\n  }];\n  return routerFeature(9 /* RouterFeatureKind.ViewTransitionsFeature */, providers);\n}\n\n/**\r\n * The directives defined in the `RouterModule`.\r\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent];\n/**\r\n * @docsNotRequired\r\n */\nconst ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : '');\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nconst ROUTER_PROVIDERS = [Location, {\n  provide: UrlSerializer,\n  useClass: DefaultUrlSerializer\n}, Router, ChildrenOutletContexts, {\n  provide: ActivatedRoute,\n  useFactory: rootRoute,\n  deps: [Router]\n}, RouterConfigLoader,\n// Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n// be removed when `provideRoutes` is removed.\ntypeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: ROUTER_IS_PROVIDED,\n  useValue: true\n} : []];\n/**\r\n * @description\r\n *\r\n * Adds directives and providers for in-app navigation among views defined in an application.\r\n * Use the Angular `Router` service to declaratively specify application states and manage state\r\n * transitions.\r\n *\r\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\r\n * However, only one `Router` service can be active.\r\n * To ensure this, there are two ways to register routes when importing this module:\r\n *\r\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\r\n * routes, and the `Router` service itself.\r\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\r\n * routes, but does not include the `Router` service.\r\n *\r\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\r\n * overview of how the `Router` service should be used.\r\n *\r\n * @publicApi\r\n */\nclass RouterModule {\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      inject(ROUTER_FORROOT_GUARD, {\n        optional: true\n      });\n    }\n  }\n  /**\r\n   * Creates and configures a module with all the router providers and directives.\r\n   * Optionally sets up an application listener to perform an initial navigation.\r\n   *\r\n   * When registering the NgModule at the root, import as follows:\r\n   *\r\n   * ```ts\r\n   * @NgModule({\r\n   *   imports: [RouterModule.forRoot(ROUTES)]\r\n   * })\r\n   * class MyNgModule {}\r\n   * ```\r\n   *\r\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\r\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\r\n   * @return The new `NgModule`.\r\n   *\r\n   */\n  static forRoot(routes, config) {\n    return {\n      ngModule: RouterModule,\n      providers: [ROUTER_PROVIDERS, typeof ngDevMode === 'undefined' || ngDevMode ? config?.enableTracing ? withDebugTracing().ɵproviders : [] : [], {\n        provide: ROUTES,\n        multi: true,\n        useValue: routes\n      }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n        provide: ROUTER_FORROOT_GUARD,\n        useFactory: provideForRootGuard,\n        deps: [[Router, new Optional(), new SkipSelf()]]\n      } : [], config?.errorHandler ? {\n        provide: NAVIGATION_ERROR_HANDLER,\n        useValue: config.errorHandler\n      } : [], {\n        provide: ROUTER_CONFIGURATION,\n        useValue: config ? config : {}\n      }, config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [], config?.initialNavigation ? provideInitialNavigation(config) : [], config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [], config?.enableViewTransitions ? withViewTransitions().ɵproviders : [], provideRouterInitializer()]\n    };\n  }\n  /**\r\n   * Creates a module with all the router directives and a provider registering routes,\r\n   * without creating a new Router service.\r\n   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\r\n   *\r\n   * ```ts\r\n   * @NgModule({\r\n   *   imports: [RouterModule.forChild(ROUTES)]\r\n   * })\r\n   * class MyNgModule {}\r\n   * ```\r\n   *\r\n   * @param routes An array of `Route` objects that define the navigation paths for the submodule.\r\n   * @return The new NgModule.\r\n   *\r\n   */\n  static forChild(routes) {\n    return {\n      ngModule: RouterModule,\n      providers: [{\n        provide: ROUTES,\n        multi: true,\n        useValue: routes\n      }]\n    };\n  }\n  static ɵfac = function RouterModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RouterModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterModule, [{\n    type: NgModule,\n    args: [{\n      imports: ROUTER_DIRECTIVES,\n      exports: ROUTER_DIRECTIVES\n    }]\n  }], () => [], null);\n})();\n/**\r\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\r\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\r\n */\nfunction provideRouterScroller() {\n  return {\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const config = inject(ROUTER_CONFIGURATION);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n      }\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n    }\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: PathLocationStrategy\n  };\n}\nfunction provideForRootGuard(router) {\n  if (router) {\n    throw new _RuntimeError(4007 /* RuntimeErrorCode.FOR_ROOT_CALLED_TWICE */, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` + ` Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config) {\n  return [config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [], config.initialNavigation === 'enabledBlocking' ? withEnabledBlockingInitialNavigation().ɵproviders : []];\n}\n// TODO(atscott): This should not be in the public API\n/**\r\n * A DI token for the router initializer that\r\n * is called after the app is bootstrapped.\r\n *\r\n * @publicApi\r\n */\nconst ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '');\nfunction provideRouterInitializer() {\n  return [\n  // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n  // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n  {\n    provide: ROUTER_INITIALIZER,\n    useFactory: getBootstrapListener\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useExisting: ROUTER_INITIALIZER\n  }];\n}\nexport { NoPreloading, PreloadAllModules, PreloadingStrategy, ROUTER_INITIALIZER, ROUTER_PROVIDERS, RouterLink, RouterLinkActive, RouterModule, RouterPreloader, provideRouter, provideRoutes, withComponentInputBinding, withDebugTracing, withDisabledInitialNavigation, withEnabledBlockingInitialNavigation, withHashLocation, withInMemoryScrolling, withNavigationErrorHandler, withPreloading, withRouterConfig, withViewTransitions };","map":{"version":3,"names":["i3","LOCATION_INITIALIZED","HashLocationStrategy","LocationStrategy","ViewportScroller","Location","PathLocationStrategy","i0","ɵRuntimeError","_RuntimeError","ɵɵsanitizeUrlOrResourceUrl","__sanitizeUrlOrResourceUrl","booleanAttribute","HostListener","Input","HostBinding","Attribute","Directive","EventEmitter","Output","ContentChildren","Optional","createEnvironmentInjector","Injectable","InjectionToken","ɵperformanceMarkFeature","_performanceMarkFeature","makeEnvironmentProviders","APP_BOOTSTRAP_LISTENER","ENVIRONMENT_INITIALIZER","provideAppInitializer","inject","Injector","ApplicationRef","InjectFlags","NgZone","SkipSelf","NgModule","NavigationEnd","isUrlTree","Router","ActivatedRoute","RouterConfigLoader","NavigationStart","NavigationSkipped","NavigationSkippedCode","Scroll","UrlSerializer","NavigationTransitions","ROUTES","afterNextNavigation","ROUTER_CONFIGURATION","NAVIGATION_ERROR_HANDLER","RoutedComponentInputBinder","INPUT_BINDER","createViewTransition","CREATE_VIEW_TRANSITION","VIEW_TRANSITION_OPTIONS","stringifyEvent","DefaultUrlSerializer","ChildrenOutletContexts","RouterOutlet","ɵEmptyOutletComponent","_EmptyOutletComponent","Subject","of","from","mergeAll","catchError","filter","concatMap","mergeMap","RouterLink","router","route","tabIndexAttribute","renderer","el","locationStrategy","href","target","queryParams","fragment","queryParamsHandling","state","info","relativeTo","isAnchorElement","subscription","onChanges","constructor","tagName","nativeElement","toLowerCase","events","subscribe","s","updateHref","setTabIndexIfNotOnNativeEl","preserveFragment","skipLocationChange","replaceUrl","newTabIndex","applyAttributeValue","ngOnChanges","changes","ngDevMode","routerLinkInput","undefined","next","routerLink","commandsOrUrlTree","Array","isArray","onClick","button","ctrlKey","shiftKey","altKey","metaKey","urlTree","extras","navigateByUrl","ngOnDestroy","unsubscribe","prepareExternalUrl","serializeUrl","sanitizedValue","attrName","attrValue","setAttribute","removeAttribute","createUrlTree","ɵfac","RouterLink_Factory","__ngFactoryType__","ɵɵdirectiveInject","ɵɵinjectAttribute","Renderer2","ElementRef","ɵdir","ɵɵdefineDirective","type","selectors","hostVars","hostBindings","RouterLink_HostBindings","rf","ctx","ɵɵlistener","RouterLink_click_HostBindingHandler","$event","ɵɵattribute","inputs","features","ɵɵNgOnChangesFeature","ɵsetClassMetadata","args","selector","decorators","transform","RouterLinkActive","element","cdr","link","links","classes","routerEventsSubscription","linkInputChangesSubscription","_isActive","isActive","routerLinkActiveOptions","exact","ariaCurrentWhenActive","isActiveChange","update","ngAfterContentInit","pipe","_","subscribeToEachLinkOnChanges","allLinkChanges","toArray","map","isLinkActive","routerLinkActive","data","split","c","navigated","queueMicrotask","hasActiveLinks","forEach","addClass","removeClass","toString","markForCheck","emit","options","isActiveMatchOptions","isActiveCheckFn","some","RouterLinkActive_Factory","ChangeDetectorRef","contentQueries","RouterLinkActive_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","outputs","exportAs","descendants","paths","PreloadingStrategy","PreloadAllModules","preload","fn","PreloadAllModules_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","NoPreloading","NoPreloading_Factory","RouterPreloader","injector","preloadingStrategy","loader","setUpPreloading","e","processRoutes","config","routes","res","providers","_injector","path","injectorForCurrentRoute","injectorForChildren","_loadedInjector","loadChildren","_loadedRoutes","canLoad","loadComponent","_loadedComponent","push","preloadConfig","children","loadedChildren$","recursiveLoadChildren$","loadComponent$","RouterPreloader_Factory","ɵɵinject","EnvironmentInjector","ROUTER_SCROLLER","RouterScroller","urlSerializer","transitions","viewportScroller","zone","scrollEventsSubscription","lastId","lastSource","restoredId","store","scrollPositionRestoration","anchorScrolling","init","setHistoryScrollRestoration","createScrollEvents","consumeScrollEvents","getScrollPosition","navigationTrigger","restoredState","navigationId","id","scheduleScrollEvent","parse","urlAfterRedirects","code","IgnoredSameUrlNavigation","url","position","scrollToPosition","anchor","scrollToAnchor","routerEvent","runOutsideAngular","setTimeout","run","RouterScroller_Factory","ɵɵinvalidFactory","provideRouter","provide","multi","useValue","ROUTER_IS_PROVIDED","useFactory","rootRoute","deps","getBootstrapListener","feature","ɵproviders","routerState","root","routerFeature","kind","ɵkind","routerIsProvidedDevModeCheck","console","warn","provideRoutes","withInMemoryScrolling","bootstrappedComponentRef","ref","get","components","bootstrapDone","BOOTSTRAP_DONE","INITIAL_NAVIGATION","initialNavigation","ROUTER_PRELOADER","resetRootComponentType","componentTypes","closed","complete","withEnabledBlockingInitialNavigation","locationInitialized","Promise","resolve","then","afterPreactivation","withDisabledInitialNavigation","setUpLocationChangeListener","withDebugTracing","group","name","log","groupEnd","withPreloading","useExisting","withRouterConfig","withHashLocation","useClass","withNavigationErrorHandler","handler","withComponentInputBinding","withViewTransitions","skipNextTransition","skipInitialTransition","ROUTER_DIRECTIVES","ROUTER_FORROOT_GUARD","ROUTER_PROVIDERS","RouterModule","optional","forRoot","ngModule","enableTracing","provideForRootGuard","errorHandler","useHash","provideHashLocationStrategy","providePathLocationStrategy","provideRouterScroller","provideInitialNavigation","bindToComponentInputs","enableViewTransitions","provideRouterInitializer","forChild","RouterModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","scrollOffset","setOffset","ROUTER_INITIALIZER"],"sources":["C:/Users/rambo/OneDrive/Desktop/cudillo-frontend/frontend-cudillo/node_modules/@angular/router/fesm2022/router_module-DTJgGWLd.mjs"],"sourcesContent":["/**\r\n * @license Angular v19.2.11\r\n * (c) 2010-2025 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport * as i3 from '@angular/common';\r\nimport { LOCATION_INITIALIZED, HashLocationStrategy, LocationStrategy, ViewportScroller, Location, PathLocationStrategy } from '@angular/common';\r\nimport * as i0 from '@angular/core';\r\nimport { ɵRuntimeError as _RuntimeError, ɵɵsanitizeUrlOrResourceUrl as __sanitizeUrlOrResourceUrl, booleanAttribute, HostListener, Input, HostBinding, Attribute, Directive, EventEmitter, Output, ContentChildren, Optional, createEnvironmentInjector, Injectable, InjectionToken, ɵperformanceMarkFeature as _performanceMarkFeature, makeEnvironmentProviders, APP_BOOTSTRAP_LISTENER, ENVIRONMENT_INITIALIZER, provideAppInitializer, inject, Injector, ApplicationRef, InjectFlags, NgZone, SkipSelf, NgModule } from '@angular/core';\r\nimport { NavigationEnd, isUrlTree, Router, ActivatedRoute, RouterConfigLoader, NavigationStart, NavigationSkipped, NavigationSkippedCode, Scroll, UrlSerializer, NavigationTransitions, ROUTES, afterNextNavigation, ROUTER_CONFIGURATION, NAVIGATION_ERROR_HANDLER, RoutedComponentInputBinder, INPUT_BINDER, createViewTransition, CREATE_VIEW_TRANSITION, VIEW_TRANSITION_OPTIONS, stringifyEvent, DefaultUrlSerializer, ChildrenOutletContexts, RouterOutlet, ɵEmptyOutletComponent as _EmptyOutletComponent } from './router-Dwfin5Au.mjs';\r\nimport { Subject, of, from } from 'rxjs';\r\nimport { mergeAll, catchError, filter, concatMap, mergeMap } from 'rxjs/operators';\r\n\r\n/**\r\n * @description\r\n *\r\n * When applied to an element in a template, makes that element a link\r\n * that initiates navigation to a route. Navigation opens one or more routed components\r\n * in one or more `<router-outlet>` locations on the page.\r\n *\r\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\r\n * the following creates a static link to the route:\r\n * `<a routerLink=\"/user/bob\">link to user component</a>`\r\n *\r\n * You can use dynamic values to generate the link.\r\n * For a dynamic link, pass an array of path segments,\r\n * followed by the params for each segment.\r\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\r\n * generates a link to `/team/11/user/bob;details=true`.\r\n *\r\n * Multiple static segments can be merged into one term and combined with dynamic segments.\r\n * For example, `['/team/11/user', userName, {details: true}]`\r\n *\r\n * The input that you provide to the link is treated as a delta to the current URL.\r\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\r\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\r\n * `/user/(jim//aux:team)`.\r\n * See {@link Router#createUrlTree} for more information.\r\n *\r\n * @usageNotes\r\n *\r\n * You can use absolute or relative paths in a link, set query parameters,\r\n * control how parameters are handled, and keep a history of navigation states.\r\n *\r\n * ### Relative link paths\r\n *\r\n * The first segment name can be prepended with `/`, `./`, or `../`.\r\n * * If the first segment begins with `/`, the router looks up the route from the root of the\r\n *   app.\r\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\r\n *   looks in the children of the current activated route.\r\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\r\n *\r\n * ### Setting and handling query params and fragments\r\n *\r\n * The following link adds a query parameter and a fragment to the generated URL:\r\n *\r\n * ```html\r\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n * By default, the directive constructs the new URL using the given query parameters.\r\n * The example generates the link: `/user/bob?debug=true#education`.\r\n *\r\n * You can instruct the directive to handle query parameters differently\r\n * by specifying the `queryParamsHandling` option in the link.\r\n * Allowed values are:\r\n *\r\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\r\n *  - `'preserve'`: Preserve the current query params.\r\n *\r\n * For example:\r\n *\r\n * ```html\r\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n *\r\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\r\n * cannot be used when the `routerLink` input is a `UrlTree`.\r\n *\r\n * See {@link UrlCreationOptions#queryParamsHandling}.\r\n *\r\n * ### Preserving navigation history\r\n *\r\n * You can provide a `state` value to be persisted to the browser's\r\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\r\n * For example:\r\n *\r\n * ```html\r\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n *\r\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\r\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\r\n * event:\r\n *\r\n * ```ts\r\n * // Get NavigationStart events\r\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\r\n *   const navigation = router.getCurrentNavigation();\r\n *   tracingService.trace({id: navigation.extras.state.tracingId});\r\n * });\r\n * ```\r\n *\r\n * @ngModule RouterModule\r\n *\r\n * @publicApi\r\n */\r\nclass RouterLink {\r\n    router;\r\n    route;\r\n    tabIndexAttribute;\r\n    renderer;\r\n    el;\r\n    locationStrategy;\r\n    /**\r\n     * Represents an `href` attribute value applied to a host element,\r\n     * when a host element is `<a>`. For other tags, the value is `null`.\r\n     */\r\n    href = null;\r\n    /**\r\n     * Represents the `target` attribute on a host element.\r\n     * This is only used when the host element is an `<a>` tag.\r\n     */\r\n    target;\r\n    /**\r\n     * Passed to {@link Router#createUrlTree} as part of the\r\n     * `UrlCreationOptions`.\r\n     * @see {@link UrlCreationOptions#queryParams}\r\n     * @see {@link Router#createUrlTree}\r\n     */\r\n    queryParams;\r\n    /**\r\n     * Passed to {@link Router#createUrlTree} as part of the\r\n     * `UrlCreationOptions`.\r\n     * @see {@link UrlCreationOptions#fragment}\r\n     * @see {@link Router#createUrlTree}\r\n     */\r\n    fragment;\r\n    /**\r\n     * Passed to {@link Router#createUrlTree} as part of the\r\n     * `UrlCreationOptions`.\r\n     * @see {@link UrlCreationOptions#queryParamsHandling}\r\n     * @see {@link Router#createUrlTree}\r\n     */\r\n    queryParamsHandling;\r\n    /**\r\n     * Passed to {@link Router#navigateByUrl} as part of the\r\n     * `NavigationBehaviorOptions`.\r\n     * @see {@link NavigationBehaviorOptions#state}\r\n     * @see {@link Router#navigateByUrl}\r\n     */\r\n    state;\r\n    /**\r\n     * Passed to {@link Router#navigateByUrl} as part of the\r\n     * `NavigationBehaviorOptions`.\r\n     * @see {@link NavigationBehaviorOptions#info}\r\n     * @see {@link Router#navigateByUrl}\r\n     */\r\n    info;\r\n    /**\r\n     * Passed to {@link Router#createUrlTree} as part of the\r\n     * `UrlCreationOptions`.\r\n     * Specify a value here when you do not want to use the default value\r\n     * for `routerLink`, which is the current activated route.\r\n     * Note that a value of `undefined` here will use the `routerLink` default.\r\n     * @see {@link UrlCreationOptions#relativeTo}\r\n     * @see {@link Router#createUrlTree}\r\n     */\r\n    relativeTo;\r\n    /** Whether a host element is an `<a>` tag. */\r\n    isAnchorElement;\r\n    subscription;\r\n    /** @internal */\r\n    onChanges = new Subject();\r\n    constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {\r\n        this.router = router;\r\n        this.route = route;\r\n        this.tabIndexAttribute = tabIndexAttribute;\r\n        this.renderer = renderer;\r\n        this.el = el;\r\n        this.locationStrategy = locationStrategy;\r\n        const tagName = el.nativeElement.tagName?.toLowerCase();\r\n        this.isAnchorElement = tagName === 'a' || tagName === 'area';\r\n        if (this.isAnchorElement) {\r\n            this.subscription = router.events.subscribe((s) => {\r\n                if (s instanceof NavigationEnd) {\r\n                    this.updateHref();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setTabIndexIfNotOnNativeEl('0');\r\n        }\r\n    }\r\n    /**\r\n     * Passed to {@link Router#createUrlTree} as part of the\r\n     * `UrlCreationOptions`.\r\n     * @see {@link UrlCreationOptions#preserveFragment}\r\n     * @see {@link Router#createUrlTree}\r\n     */\r\n    preserveFragment = false;\r\n    /**\r\n     * Passed to {@link Router#navigateByUrl} as part of the\r\n     * `NavigationBehaviorOptions`.\r\n     * @see {@link NavigationBehaviorOptions#skipLocationChange}\r\n     * @see {@link Router#navigateByUrl}\r\n     */\r\n    skipLocationChange = false;\r\n    /**\r\n     * Passed to {@link Router#navigateByUrl} as part of the\r\n     * `NavigationBehaviorOptions`.\r\n     * @see {@link NavigationBehaviorOptions#replaceUrl}\r\n     * @see {@link Router#navigateByUrl}\r\n     */\r\n    replaceUrl = false;\r\n    /**\r\n     * Modifies the tab index if there was not a tabindex attribute on the element during\r\n     * instantiation.\r\n     */\r\n    setTabIndexIfNotOnNativeEl(newTabIndex) {\r\n        if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\r\n            return;\r\n        }\r\n        this.applyAttributeValue('tabindex', newTabIndex);\r\n    }\r\n    /** @docs-private */\r\n    // TODO(atscott): Remove changes parameter in major version as a breaking change.\r\n    ngOnChanges(changes) {\r\n        if (ngDevMode &&\r\n            isUrlTree(this.routerLinkInput) &&\r\n            (this.fragment !== undefined ||\r\n                this.queryParams ||\r\n                this.queryParamsHandling ||\r\n                this.preserveFragment ||\r\n                this.relativeTo)) {\r\n            throw new _RuntimeError(4016 /* RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS */, 'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.');\r\n        }\r\n        if (this.isAnchorElement) {\r\n            this.updateHref();\r\n        }\r\n        // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\r\n        // to the RouterLinks it's tracking.\r\n        this.onChanges.next(this);\r\n    }\r\n    routerLinkInput = null;\r\n    /**\r\n     * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\r\n     *   - **array**: commands to pass to {@link Router#createUrlTree}.\r\n     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\r\n     *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\r\n     *     and other inputs that correspond to properties of `UrlCreationOptions`.\r\n     *   - **null|undefined**: effectively disables the `routerLink`\r\n     * @see {@link Router#createUrlTree}\r\n     */\r\n    set routerLink(commandsOrUrlTree) {\r\n        if (commandsOrUrlTree == null) {\r\n            this.routerLinkInput = null;\r\n            this.setTabIndexIfNotOnNativeEl(null);\r\n        }\r\n        else {\r\n            if (isUrlTree(commandsOrUrlTree)) {\r\n                this.routerLinkInput = commandsOrUrlTree;\r\n            }\r\n            else {\r\n                this.routerLinkInput = Array.isArray(commandsOrUrlTree)\r\n                    ? commandsOrUrlTree\r\n                    : [commandsOrUrlTree];\r\n            }\r\n            this.setTabIndexIfNotOnNativeEl('0');\r\n        }\r\n    }\r\n    /** @docs-private */\r\n    onClick(button, ctrlKey, shiftKey, altKey, metaKey) {\r\n        const urlTree = this.urlTree;\r\n        if (urlTree === null) {\r\n            return true;\r\n        }\r\n        if (this.isAnchorElement) {\r\n            if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\r\n                return true;\r\n            }\r\n            if (typeof this.target === 'string' && this.target != '_self') {\r\n                return true;\r\n            }\r\n        }\r\n        const extras = {\r\n            skipLocationChange: this.skipLocationChange,\r\n            replaceUrl: this.replaceUrl,\r\n            state: this.state,\r\n            info: this.info,\r\n        };\r\n        this.router.navigateByUrl(urlTree, extras);\r\n        // Return `false` for `<a>` elements to prevent default action\r\n        // and cancel the native behavior, since the navigation is handled\r\n        // by the Router.\r\n        return !this.isAnchorElement;\r\n    }\r\n    /** @docs-private */\r\n    ngOnDestroy() {\r\n        this.subscription?.unsubscribe();\r\n    }\r\n    updateHref() {\r\n        const urlTree = this.urlTree;\r\n        this.href =\r\n            urlTree !== null && this.locationStrategy\r\n                ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree))\r\n                : null;\r\n        const sanitizedValue = this.href === null\r\n            ? null\r\n            : // This class represents a directive that can be added to both `<a>` elements,\r\n                // as well as other elements. As a result, we can't define security context at\r\n                // compile time. So the security context is deferred to runtime.\r\n                // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function\r\n                // based on the tag and property names. The logic mimics the one from\r\n                // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.\r\n                //\r\n                // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`\r\n                // instead of applying a value via a renderer, after a final merge of the\r\n                // `RouterLinkWithHref` directive.\r\n                __sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), 'href');\r\n        this.applyAttributeValue('href', sanitizedValue);\r\n    }\r\n    applyAttributeValue(attrName, attrValue) {\r\n        const renderer = this.renderer;\r\n        const nativeElement = this.el.nativeElement;\r\n        if (attrValue !== null) {\r\n            renderer.setAttribute(nativeElement, attrName, attrValue);\r\n        }\r\n        else {\r\n            renderer.removeAttribute(nativeElement, attrName);\r\n        }\r\n    }\r\n    get urlTree() {\r\n        if (this.routerLinkInput === null) {\r\n            return null;\r\n        }\r\n        else if (isUrlTree(this.routerLinkInput)) {\r\n            return this.routerLinkInput;\r\n        }\r\n        return this.router.createUrlTree(this.routerLinkInput, {\r\n            // If the `relativeTo` input is not defined, we want to use `this.route` by default.\r\n            // Otherwise, we should use the value provided by the user in the input.\r\n            relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\r\n            queryParams: this.queryParams,\r\n            fragment: this.fragment,\r\n            queryParamsHandling: this.queryParamsHandling,\r\n            preserveFragment: this.preserveFragment,\r\n        });\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterLink, deps: [{ token: Router }, { token: ActivatedRoute }, { token: 'tabindex', attribute: true }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i3.LocationStrategy }], target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.11\", type: RouterLink, isStandalone: true, selector: \"[routerLink]\", inputs: { target: \"target\", queryParams: \"queryParams\", fragment: \"fragment\", queryParamsHandling: \"queryParamsHandling\", state: \"state\", info: \"info\", relativeTo: \"relativeTo\", preserveFragment: [\"preserveFragment\", \"preserveFragment\", booleanAttribute], skipLocationChange: [\"skipLocationChange\", \"skipLocationChange\", booleanAttribute], replaceUrl: [\"replaceUrl\", \"replaceUrl\", booleanAttribute], routerLink: \"routerLink\" }, host: { listeners: { \"click\": \"onClick($event.button,$event.ctrlKey,$event.shiftKey,$event.altKey,$event.metaKey)\" }, properties: { \"attr.target\": \"this.target\" } }, usesOnChanges: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterLink, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[routerLink]',\r\n                }]\r\n        }], ctorParameters: () => [{ type: Router }, { type: ActivatedRoute }, { type: undefined, decorators: [{\r\n                    type: Attribute,\r\n                    args: ['tabindex']\r\n                }] }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i3.LocationStrategy }], propDecorators: { target: [{\r\n                type: HostBinding,\r\n                args: ['attr.target']\r\n            }, {\r\n                type: Input\r\n            }], queryParams: [{\r\n                type: Input\r\n            }], fragment: [{\r\n                type: Input\r\n            }], queryParamsHandling: [{\r\n                type: Input\r\n            }], state: [{\r\n                type: Input\r\n            }], info: [{\r\n                type: Input\r\n            }], relativeTo: [{\r\n                type: Input\r\n            }], preserveFragment: [{\r\n                type: Input,\r\n                args: [{ transform: booleanAttribute }]\r\n            }], skipLocationChange: [{\r\n                type: Input,\r\n                args: [{ transform: booleanAttribute }]\r\n            }], replaceUrl: [{\r\n                type: Input,\r\n                args: [{ transform: booleanAttribute }]\r\n            }], routerLink: [{\r\n                type: Input\r\n            }], onClick: [{\r\n                type: HostListener,\r\n                args: ['click', [\r\n                        '$event.button',\r\n                        '$event.ctrlKey',\r\n                        '$event.shiftKey',\r\n                        '$event.altKey',\r\n                        '$event.metaKey',\r\n                    ]]\r\n            }] } });\r\n\r\n/**\r\n *\r\n * @description\r\n *\r\n * Tracks whether the linked route of an element is currently active, and allows you\r\n * to specify one or more CSS classes to add to the element when the linked route\r\n * is active.\r\n *\r\n * Use this directive to create a visual distinction for elements associated with an active route.\r\n * For example, the following code highlights the word \"Bob\" when the router\r\n * activates the associated route:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\r\n * ```\r\n *\r\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\r\n * added to the anchor tag. If the URL changes, the class is removed.\r\n *\r\n * You can set more than one class using a space-separated string or an array.\r\n * For example:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\r\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\r\n * ```\r\n *\r\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\r\n * true}\">Bob</a>\r\n * ```\r\n *\r\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\r\n * instance to a template variable.\r\n * For example, the following checks the status without assigning any CSS classes:\r\n *\r\n * ```html\r\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\r\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\r\n * </a>\r\n * ```\r\n *\r\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\r\n * For example, the following sets the active-link class on the `<div>`  parent tag\r\n * when the URL is either '/user/jim' or '/user/bob'.\r\n *\r\n * ```html\r\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\r\n *   <a routerLink=\"/user/jim\">Jim</a>\r\n *   <a routerLink=\"/user/bob\">Bob</a>\r\n * </div>\r\n * ```\r\n *\r\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\r\n * to provide an alternative distinction for active elements to visually impaired users.\r\n *\r\n * For example, the following code adds the 'active' class to the Home Page link when it is\r\n * indeed active and in such case also sets its aria-current attribute to 'page':\r\n *\r\n * ```html\r\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\r\n * ```\r\n *\r\n * @ngModule RouterModule\r\n *\r\n * @publicApi\r\n */\r\nclass RouterLinkActive {\r\n    router;\r\n    element;\r\n    renderer;\r\n    cdr;\r\n    link;\r\n    links;\r\n    classes = [];\r\n    routerEventsSubscription;\r\n    linkInputChangesSubscription;\r\n    _isActive = false;\r\n    get isActive() {\r\n        return this._isActive;\r\n    }\r\n    /**\r\n     * Options to configure how to determine if the router link is active.\r\n     *\r\n     * These options are passed to the `Router.isActive()` function.\r\n     *\r\n     * @see {@link Router#isActive}\r\n     */\r\n    routerLinkActiveOptions = { exact: false };\r\n    /**\r\n     * Aria-current attribute to apply when the router link is active.\r\n     *\r\n     * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\r\n     */\r\n    ariaCurrentWhenActive;\r\n    /**\r\n     *\r\n     * You can use the output `isActiveChange` to get notified each time the link becomes\r\n     * active or inactive.\r\n     *\r\n     * Emits:\r\n     * true  -> Route is active\r\n     * false -> Route is inactive\r\n     *\r\n     * ```html\r\n     * <a\r\n     *  routerLink=\"/user/bob\"\r\n     *  routerLinkActive=\"active-link\"\r\n     *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\r\n     * ```\r\n     */\r\n    isActiveChange = new EventEmitter();\r\n    constructor(router, element, renderer, cdr, link) {\r\n        this.router = router;\r\n        this.element = element;\r\n        this.renderer = renderer;\r\n        this.cdr = cdr;\r\n        this.link = link;\r\n        this.routerEventsSubscription = router.events.subscribe((s) => {\r\n            if (s instanceof NavigationEnd) {\r\n                this.update();\r\n            }\r\n        });\r\n    }\r\n    /** @docs-private */\r\n    ngAfterContentInit() {\r\n        // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\r\n        of(this.links.changes, of(null))\r\n            .pipe(mergeAll())\r\n            .subscribe((_) => {\r\n            this.update();\r\n            this.subscribeToEachLinkOnChanges();\r\n        });\r\n    }\r\n    subscribeToEachLinkOnChanges() {\r\n        this.linkInputChangesSubscription?.unsubscribe();\r\n        const allLinkChanges = [...this.links.toArray(), this.link]\r\n            .filter((link) => !!link)\r\n            .map((link) => link.onChanges);\r\n        this.linkInputChangesSubscription = from(allLinkChanges)\r\n            .pipe(mergeAll())\r\n            .subscribe((link) => {\r\n            if (this._isActive !== this.isLinkActive(this.router)(link)) {\r\n                this.update();\r\n            }\r\n        });\r\n    }\r\n    set routerLinkActive(data) {\r\n        const classes = Array.isArray(data) ? data : data.split(' ');\r\n        this.classes = classes.filter((c) => !!c);\r\n    }\r\n    /** @docs-private */\r\n    ngOnChanges(changes) {\r\n        this.update();\r\n    }\r\n    /** @docs-private */\r\n    ngOnDestroy() {\r\n        this.routerEventsSubscription.unsubscribe();\r\n        this.linkInputChangesSubscription?.unsubscribe();\r\n    }\r\n    update() {\r\n        if (!this.links || !this.router.navigated)\r\n            return;\r\n        queueMicrotask(() => {\r\n            const hasActiveLinks = this.hasActiveLinks();\r\n            this.classes.forEach((c) => {\r\n                if (hasActiveLinks) {\r\n                    this.renderer.addClass(this.element.nativeElement, c);\r\n                }\r\n                else {\r\n                    this.renderer.removeClass(this.element.nativeElement, c);\r\n                }\r\n            });\r\n            if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\r\n                this.renderer.setAttribute(this.element.nativeElement, 'aria-current', this.ariaCurrentWhenActive.toString());\r\n            }\r\n            else {\r\n                this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\r\n            }\r\n            // Only emit change if the active state changed.\r\n            if (this._isActive !== hasActiveLinks) {\r\n                this._isActive = hasActiveLinks;\r\n                this.cdr.markForCheck();\r\n                // Emit on isActiveChange after classes are updated\r\n                this.isActiveChange.emit(hasActiveLinks);\r\n            }\r\n        });\r\n    }\r\n    isLinkActive(router) {\r\n        const options = isActiveMatchOptions(this.routerLinkActiveOptions)\r\n            ? this.routerLinkActiveOptions\r\n            : // While the types should disallow `undefined` here, it's possible without strict inputs\r\n                this.routerLinkActiveOptions.exact || false;\r\n        return (link) => {\r\n            const urlTree = link.urlTree;\r\n            return urlTree ? router.isActive(urlTree, options) : false;\r\n        };\r\n    }\r\n    hasActiveLinks() {\r\n        const isActiveCheckFn = this.isLinkActive(this.router);\r\n        return (this.link && isActiveCheckFn(this.link)) || this.links.some(isActiveCheckFn);\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterLinkActive, deps: [{ token: Router }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: RouterLink, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.11\", type: RouterLinkActive, isStandalone: true, selector: \"[routerLinkActive]\", inputs: { routerLinkActiveOptions: \"routerLinkActiveOptions\", ariaCurrentWhenActive: \"ariaCurrentWhenActive\", routerLinkActive: \"routerLinkActive\" }, outputs: { isActiveChange: \"isActiveChange\" }, queries: [{ propertyName: \"links\", predicate: RouterLink, descendants: true }], exportAs: [\"routerLinkActive\"], usesOnChanges: true, ngImport: i0 });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterLinkActive, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[routerLinkActive]',\r\n                    exportAs: 'routerLinkActive',\r\n                }]\r\n        }], ctorParameters: () => [{ type: Router }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: RouterLink, decorators: [{\r\n                    type: Optional\r\n                }] }], propDecorators: { links: [{\r\n                type: ContentChildren,\r\n                args: [RouterLink, { descendants: true }]\r\n            }], routerLinkActiveOptions: [{\r\n                type: Input\r\n            }], ariaCurrentWhenActive: [{\r\n                type: Input\r\n            }], isActiveChange: [{\r\n                type: Output\r\n            }], routerLinkActive: [{\r\n                type: Input\r\n            }] } });\r\n/**\r\n * Use instead of `'paths' in options` to be compatible with property renaming\r\n */\r\nfunction isActiveMatchOptions(options) {\r\n    return !!options.paths;\r\n}\r\n\r\n/**\r\n * @description\r\n *\r\n * Provides a preloading strategy.\r\n *\r\n * @publicApi\r\n */\r\nclass PreloadingStrategy {\r\n}\r\n/**\r\n * @description\r\n *\r\n * Provides a preloading strategy that preloads all modules as quickly as possible.\r\n *\r\n * ```ts\r\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass PreloadAllModules {\r\n    preload(route, fn) {\r\n        return fn().pipe(catchError(() => of(null)));\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: PreloadAllModules, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: PreloadAllModules, providedIn: 'root' });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: PreloadAllModules, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }] });\r\n/**\r\n * @description\r\n *\r\n * Provides a preloading strategy that does not preload any modules.\r\n *\r\n * This strategy is enabled by default.\r\n *\r\n * @publicApi\r\n */\r\nclass NoPreloading {\r\n    preload(route, fn) {\r\n        return of(null);\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: NoPreloading, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: NoPreloading, providedIn: 'root' });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: NoPreloading, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }] });\r\n/**\r\n * The preloader optimistically loads all router configurations to\r\n * make navigations into lazily-loaded sections of the application faster.\r\n *\r\n * The preloader runs in the background. When the router bootstraps, the preloader\r\n * starts listening to all navigation events. After every such event, the preloader\r\n * will check if any configurations can be loaded lazily.\r\n *\r\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\r\n *\r\n * @publicApi\r\n */\r\nclass RouterPreloader {\r\n    router;\r\n    injector;\r\n    preloadingStrategy;\r\n    loader;\r\n    subscription;\r\n    constructor(router, injector, preloadingStrategy, loader) {\r\n        this.router = router;\r\n        this.injector = injector;\r\n        this.preloadingStrategy = preloadingStrategy;\r\n        this.loader = loader;\r\n    }\r\n    setUpPreloading() {\r\n        this.subscription = this.router.events\r\n            .pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload()))\r\n            .subscribe(() => { });\r\n    }\r\n    preload() {\r\n        return this.processRoutes(this.injector, this.router.config);\r\n    }\r\n    /** @docs-private */\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n    processRoutes(injector, routes) {\r\n        const res = [];\r\n        for (const route of routes) {\r\n            if (route.providers && !route._injector) {\r\n                route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);\r\n            }\r\n            const injectorForCurrentRoute = route._injector ?? injector;\r\n            const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\r\n            // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\r\n            // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\r\n            // happens as a consequence of needing to descend into children for route matching immediately\r\n            // while component loading is deferred until route activation. Because `canLoad` guards can\r\n            // have side effects, we cannot execute them here so we instead skip preloading altogether\r\n            // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\r\n            // at all. Code splitting and lazy loading is separate from client-side authorization checks\r\n            // and should not be used as a security measure to prevent loading of code.\r\n            if ((route.loadChildren && !route._loadedRoutes && route.canLoad === undefined) ||\r\n                (route.loadComponent && !route._loadedComponent)) {\r\n                res.push(this.preloadConfig(injectorForCurrentRoute, route));\r\n            }\r\n            if (route.children || route._loadedRoutes) {\r\n                res.push(this.processRoutes(injectorForChildren, (route.children ?? route._loadedRoutes)));\r\n            }\r\n        }\r\n        return from(res).pipe(mergeAll());\r\n    }\r\n    preloadConfig(injector, route) {\r\n        return this.preloadingStrategy.preload(route, () => {\r\n            let loadedChildren$;\r\n            if (route.loadChildren && route.canLoad === undefined) {\r\n                loadedChildren$ = this.loader.loadChildren(injector, route);\r\n            }\r\n            else {\r\n                loadedChildren$ = of(null);\r\n            }\r\n            const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config) => {\r\n                if (config === null) {\r\n                    return of(void 0);\r\n                }\r\n                route._loadedRoutes = config.routes;\r\n                route._loadedInjector = config.injector;\r\n                // If the loaded config was a module, use that as the module/module injector going\r\n                // forward. Otherwise, continue using the current module/module injector.\r\n                return this.processRoutes(config.injector ?? injector, config.routes);\r\n            }));\r\n            if (route.loadComponent && !route._loadedComponent) {\r\n                const loadComponent$ = this.loader.loadComponent(route);\r\n                return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\r\n            }\r\n            else {\r\n                return recursiveLoadChildren$;\r\n            }\r\n        });\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterPreloader, deps: [{ token: Router }, { token: i0.EnvironmentInjector }, { token: PreloadingStrategy }, { token: RouterConfigLoader }], target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterPreloader, providedIn: 'root' });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterPreloader, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: () => [{ type: Router }, { type: i0.EnvironmentInjector }, { type: PreloadingStrategy }, { type: RouterConfigLoader }] });\r\n\r\nconst ROUTER_SCROLLER = new InjectionToken('');\r\nclass RouterScroller {\r\n    urlSerializer;\r\n    transitions;\r\n    viewportScroller;\r\n    zone;\r\n    options;\r\n    routerEventsSubscription;\r\n    scrollEventsSubscription;\r\n    lastId = 0;\r\n    lastSource = 'imperative';\r\n    restoredId = 0;\r\n    store = {};\r\n    /** @docs-private */\r\n    constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {\r\n        this.urlSerializer = urlSerializer;\r\n        this.transitions = transitions;\r\n        this.viewportScroller = viewportScroller;\r\n        this.zone = zone;\r\n        this.options = options;\r\n        // Default both options to 'disabled'\r\n        options.scrollPositionRestoration ||= 'disabled';\r\n        options.anchorScrolling ||= 'disabled';\r\n    }\r\n    init() {\r\n        // we want to disable the automatic scrolling because having two places\r\n        // responsible for scrolling results race conditions, especially given\r\n        // that browser don't implement this behavior consistently\r\n        if (this.options.scrollPositionRestoration !== 'disabled') {\r\n            this.viewportScroller.setHistoryScrollRestoration('manual');\r\n        }\r\n        this.routerEventsSubscription = this.createScrollEvents();\r\n        this.scrollEventsSubscription = this.consumeScrollEvents();\r\n    }\r\n    createScrollEvents() {\r\n        return this.transitions.events.subscribe((e) => {\r\n            if (e instanceof NavigationStart) {\r\n                // store the scroll position of the current stable navigations.\r\n                this.store[this.lastId] = this.viewportScroller.getScrollPosition();\r\n                this.lastSource = e.navigationTrigger;\r\n                this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\r\n            }\r\n            else if (e instanceof NavigationEnd) {\r\n                this.lastId = e.id;\r\n                this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\r\n            }\r\n            else if (e instanceof NavigationSkipped &&\r\n                e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {\r\n                this.lastSource = undefined;\r\n                this.restoredId = 0;\r\n                this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\r\n            }\r\n        });\r\n    }\r\n    consumeScrollEvents() {\r\n        return this.transitions.events.subscribe((e) => {\r\n            if (!(e instanceof Scroll))\r\n                return;\r\n            // a popstate event. The pop state event will always ignore anchor scrolling.\r\n            if (e.position) {\r\n                if (this.options.scrollPositionRestoration === 'top') {\r\n                    this.viewportScroller.scrollToPosition([0, 0]);\r\n                }\r\n                else if (this.options.scrollPositionRestoration === 'enabled') {\r\n                    this.viewportScroller.scrollToPosition(e.position);\r\n                }\r\n                // imperative navigation \"forward\"\r\n            }\r\n            else {\r\n                if (e.anchor && this.options.anchorScrolling === 'enabled') {\r\n                    this.viewportScroller.scrollToAnchor(e.anchor);\r\n                }\r\n                else if (this.options.scrollPositionRestoration !== 'disabled') {\r\n                    this.viewportScroller.scrollToPosition([0, 0]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    scheduleScrollEvent(routerEvent, anchor) {\r\n        this.zone.runOutsideAngular(() => {\r\n            // The scroll event needs to be delayed until after change detection. Otherwise, we may\r\n            // attempt to restore the scroll position before the router outlet has fully rendered the\r\n            // component by executing its update block of the template function.\r\n            setTimeout(() => {\r\n                this.zone.run(() => {\r\n                    this.transitions.events.next(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n    /** @docs-private */\r\n    ngOnDestroy() {\r\n        this.routerEventsSubscription?.unsubscribe();\r\n        this.scrollEventsSubscription?.unsubscribe();\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterScroller, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\r\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterScroller });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterScroller, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: () => [{ type: UrlSerializer }, { type: NavigationTransitions }, { type: i3.ViewportScroller }, { type: i0.NgZone }, { type: undefined }] });\r\n\r\n/**\r\n * Sets up providers necessary to enable `Router` functionality for the application.\r\n * Allows to configure a set of routes as well as extra features that should be enabled.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can add a Router to your application:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [provideRouter(appRoutes)]\r\n * });\r\n * ```\r\n *\r\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\r\n * type:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes,\r\n *         withDebugTracing(),\r\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link RouterFeatures}\r\n *\r\n * @publicApi\r\n * @param routes A set of `Route`s to use for the application routing table.\r\n * @param features Optional features to configure additional router behaviors.\r\n * @returns A set of providers to setup a Router.\r\n */\r\nfunction provideRouter(routes, ...features) {\r\n    return makeEnvironmentProviders([\r\n        { provide: ROUTES, multi: true, useValue: routes },\r\n        typeof ngDevMode === 'undefined' || ngDevMode\r\n            ? { provide: ROUTER_IS_PROVIDED, useValue: true }\r\n            : [],\r\n        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\r\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useFactory: getBootstrapListener },\r\n        features.map((feature) => feature.ɵproviders),\r\n    ]);\r\n}\r\nfunction rootRoute(router) {\r\n    return router.routerState.root;\r\n}\r\n/**\r\n * Helper function to create an object that represents a Router feature.\r\n */\r\nfunction routerFeature(kind, providers) {\r\n    return { ɵkind: kind, ɵproviders: providers };\r\n}\r\n/**\r\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\r\n * called.\r\n */\r\nconst ROUTER_IS_PROVIDED = new InjectionToken('', {\r\n    providedIn: 'root',\r\n    factory: () => false,\r\n});\r\nconst routerIsProvidedDevModeCheck = {\r\n    provide: ENVIRONMENT_INITIALIZER,\r\n    multi: true,\r\n    useFactory() {\r\n        return () => {\r\n            if (!inject(ROUTER_IS_PROVIDED)) {\r\n                console.warn('`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' +\r\n                    'This is likely a mistake.');\r\n            }\r\n        };\r\n    },\r\n};\r\n/**\r\n * Registers a DI provider for a set of routes.\r\n * @param routes The route configuration to provide.\r\n *\r\n * @usageNotes\r\n *\r\n * ```ts\r\n * @NgModule({\r\n *   providers: [provideRoutes(ROUTES)]\r\n * })\r\n * class LazyLoadedChildModule {}\r\n * ```\r\n *\r\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\r\n * @see {@link ROUTES}\r\n * @publicApi\r\n */\r\nfunction provideRoutes(routes) {\r\n    return [\r\n        { provide: ROUTES, multi: true, useValue: routes },\r\n        typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : [],\r\n    ];\r\n}\r\n/**\r\n * Enables customizable scrolling behavior for router navigations.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable scrolling feature:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withInMemoryScrolling())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n * @see {@link ViewportScroller}\r\n *\r\n * @publicApi\r\n * @param options Set of configuration parameters to customize scrolling behavior, see\r\n *     `InMemoryScrollingOptions` for additional information.\r\n * @returns A set of providers for use with `provideRouter`.\r\n */\r\nfunction withInMemoryScrolling(options = {}) {\r\n    const providers = [\r\n        {\r\n            provide: ROUTER_SCROLLER,\r\n            useFactory: () => {\r\n                const viewportScroller = inject(ViewportScroller);\r\n                const zone = inject(NgZone);\r\n                const transitions = inject(NavigationTransitions);\r\n                const urlSerializer = inject(UrlSerializer);\r\n                return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\r\n            },\r\n        },\r\n    ];\r\n    return routerFeature(4 /* RouterFeatureKind.InMemoryScrollingFeature */, providers);\r\n}\r\nfunction getBootstrapListener() {\r\n    const injector = inject(Injector);\r\n    return (bootstrappedComponentRef) => {\r\n        const ref = injector.get(ApplicationRef);\r\n        if (bootstrappedComponentRef !== ref.components[0]) {\r\n            return;\r\n        }\r\n        const router = injector.get(Router);\r\n        const bootstrapDone = injector.get(BOOTSTRAP_DONE);\r\n        if (injector.get(INITIAL_NAVIGATION) === 1 /* InitialNavigation.EnabledNonBlocking */) {\r\n            router.initialNavigation();\r\n        }\r\n        injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();\r\n        injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();\r\n        router.resetRootComponentType(ref.componentTypes[0]);\r\n        if (!bootstrapDone.closed) {\r\n            bootstrapDone.next();\r\n            bootstrapDone.complete();\r\n            bootstrapDone.unsubscribe();\r\n        }\r\n    };\r\n}\r\n/**\r\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\r\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\r\n * to the activation phase.\r\n */\r\nconst BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '', {\r\n    factory: () => {\r\n        return new Subject();\r\n    },\r\n});\r\nconst INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '', { providedIn: 'root', factory: () => 1 /* InitialNavigation.EnabledNonBlocking */ });\r\n/**\r\n * Configures initial navigation to start before the root component is created.\r\n *\r\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\r\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\r\n * your application.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable this navigation behavior:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @publicApi\r\n * @returns A set of providers for use with `provideRouter`.\r\n */\r\nfunction withEnabledBlockingInitialNavigation() {\r\n    const providers = [\r\n        { provide: INITIAL_NAVIGATION, useValue: 0 /* InitialNavigation.EnabledBlocking */ },\r\n        provideAppInitializer(() => {\r\n            const injector = inject(Injector);\r\n            const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());\r\n            return locationInitialized.then(() => {\r\n                return new Promise((resolve) => {\r\n                    const router = injector.get(Router);\r\n                    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\r\n                    afterNextNavigation(router, () => {\r\n                        // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\r\n                        // without a redirect.\r\n                        resolve(true);\r\n                    });\r\n                    injector.get(NavigationTransitions).afterPreactivation = () => {\r\n                        // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\r\n                        // assume activation will complete successfully (even though this is not\r\n                        // guaranteed).\r\n                        resolve(true);\r\n                        return bootstrapDone.closed ? of(void 0) : bootstrapDone;\r\n                    };\r\n                    router.initialNavigation();\r\n                });\r\n            });\r\n        }),\r\n    ];\r\n    return routerFeature(2 /* RouterFeatureKind.EnabledBlockingInitialNavigationFeature */, providers);\r\n}\r\n/**\r\n * Disables initial navigation.\r\n *\r\n * Use if there is a reason to have more control over when the router starts its initial navigation\r\n * due to some complex initialization logic.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can disable initial navigation:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\r\nfunction withDisabledInitialNavigation() {\r\n    const providers = [\r\n        provideAppInitializer(() => {\r\n            inject(Router).setUpLocationChangeListener();\r\n        }),\r\n        { provide: INITIAL_NAVIGATION, useValue: 2 /* InitialNavigation.Disabled */ },\r\n    ];\r\n    return routerFeature(3 /* RouterFeatureKind.DisabledInitialNavigationFeature */, providers);\r\n}\r\n/**\r\n * Enables logging of all internal navigation events to the console.\r\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable debug tracing:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withDebugTracing())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\r\nfunction withDebugTracing() {\r\n    let providers = [];\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n        providers = [\r\n            {\r\n                provide: ENVIRONMENT_INITIALIZER,\r\n                multi: true,\r\n                useFactory: () => {\r\n                    const router = inject(Router);\r\n                    return () => router.events.subscribe((e) => {\r\n                        // tslint:disable:no-console\r\n                        console.group?.(`Router Event: ${e.constructor.name}`);\r\n                        console.log(stringifyEvent(e));\r\n                        console.log(e);\r\n                        console.groupEnd?.();\r\n                        // tslint:enable:no-console\r\n                    });\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    else {\r\n        providers = [];\r\n    }\r\n    return routerFeature(1 /* RouterFeatureKind.DebugTracingFeature */, providers);\r\n}\r\nconst ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '');\r\n/**\r\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\r\n * reference to a class that implements a `PreloadingStrategy`.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can configure preloading:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\r\n *     should be used.\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\r\nfunction withPreloading(preloadingStrategy) {\r\n    const providers = [\r\n        { provide: ROUTER_PRELOADER, useExisting: RouterPreloader },\r\n        { provide: PreloadingStrategy, useExisting: preloadingStrategy },\r\n    ];\r\n    return routerFeature(0 /* RouterFeatureKind.PreloadingFeature */, providers);\r\n}\r\n/**\r\n * Allows to provide extra parameters to configure Router.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can provide extra configuration options:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withRouterConfig({\r\n *          onSameUrlNavigation: 'reload'\r\n *       }))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n *\r\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\r\n *     additional information.\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\r\nfunction withRouterConfig(options) {\r\n    const providers = [{ provide: ROUTER_CONFIGURATION, useValue: options }];\r\n    return routerFeature(5 /* RouterFeatureKind.RouterConfigurationFeature */, providers);\r\n}\r\n/**\r\n * Provides the location strategy that uses the URL fragment instead of the history API.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can use the hash location option:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withHashLocation())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link provideRouter}\r\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\r\nfunction withHashLocation() {\r\n    const providers = [{ provide: LocationStrategy, useClass: HashLocationStrategy }];\r\n    return routerFeature(6 /* RouterFeatureKind.RouterHashLocationFeature */, providers);\r\n}\r\n/**\r\n * Provides a function which is called when a navigation error occurs.\r\n *\r\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\r\n * so you can use the [`inject`](api/core/inject) function.\r\n *\r\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\r\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\r\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\r\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\r\n * how the `Router` handles the error.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can use the error handler option:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\r\n * inject(MyErrorTracker).trackError(e)))\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @see {@link NavigationError}\r\n * @see {@link /api/core/inject inject}\r\n * @see {@link runInInjectionContext}\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n *\r\n * @publicApi\r\n */\r\nfunction withNavigationErrorHandler(handler) {\r\n    const providers = [\r\n        {\r\n            provide: NAVIGATION_ERROR_HANDLER,\r\n            useValue: handler,\r\n        },\r\n    ];\r\n    return routerFeature(7 /* RouterFeatureKind.NavigationErrorHandlerFeature */, providers);\r\n}\r\n/**\r\n * Enables binding information from the `Router` state directly to the inputs of the component in\r\n * `Route` configurations.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable the feature:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withComponentInputBinding())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * The router bindings information from any of the following sources:\r\n *\r\n *  - query parameters\r\n *  - path and matrix parameters\r\n *  - static route data\r\n *  - data from resolvers\r\n *\r\n * Duplicate keys are resolved in the same order from above, from least to greatest,\r\n * meaning that resolvers have the highest precedence and override any of the other information\r\n * from the route.\r\n *\r\n * Importantly, when an input does not have an item in the route data with a matching key, this\r\n * input is set to `undefined`. This prevents previous information from being\r\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\r\n * Default values can be provided with a resolver on the route to ensure the value is always present\r\n * or an input and use an input transform in the component.\r\n *\r\n * @see {@link /guide/components/inputs#input-transforms Input Transforms}\r\n * @returns A set of providers for use with `provideRouter`.\r\n */\r\nfunction withComponentInputBinding() {\r\n    const providers = [\r\n        RoutedComponentInputBinder,\r\n        { provide: INPUT_BINDER, useExisting: RoutedComponentInputBinder },\r\n    ];\r\n    return routerFeature(8 /* RouterFeatureKind.ComponentInputBindingFeature */, providers);\r\n}\r\n/**\r\n * Enables view transitions in the Router by running the route activation and deactivation inside of\r\n * `document.startViewTransition`.\r\n *\r\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\r\n * view transitions, the Router will not attempt to start a view transition and continue processing\r\n * the navigation as usual.\r\n *\r\n * @usageNotes\r\n *\r\n * Basic example of how you can enable the feature:\r\n * ```ts\r\n * const appRoutes: Routes = [];\r\n * bootstrapApplication(AppComponent,\r\n *   {\r\n *     providers: [\r\n *       provideRouter(appRoutes, withViewTransitions())\r\n *     ]\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * @returns A set of providers for use with `provideRouter`.\r\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\r\n * @developerPreview\r\n */\r\nfunction withViewTransitions(options) {\r\n    _performanceMarkFeature('NgRouterViewTransitions');\r\n    const providers = [\r\n        { provide: CREATE_VIEW_TRANSITION, useValue: createViewTransition },\r\n        {\r\n            provide: VIEW_TRANSITION_OPTIONS,\r\n            useValue: { skipNextTransition: !!options?.skipInitialTransition, ...options },\r\n        },\r\n    ];\r\n    return routerFeature(9 /* RouterFeatureKind.ViewTransitionsFeature */, providers);\r\n}\r\n\r\n/**\r\n * The directives defined in the `RouterModule`.\r\n */\r\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent];\r\n/**\r\n * @docsNotRequired\r\n */\r\nconst ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : '');\r\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\r\n// here to avoid a breaking change whereby the provider order matters based on where the\r\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\r\n// change in a major version.\r\nconst ROUTER_PROVIDERS = [\r\n    Location,\r\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\r\n    Router,\r\n    ChildrenOutletContexts,\r\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\r\n    RouterConfigLoader,\r\n    // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\r\n    // be removed when `provideRoutes` is removed.\r\n    typeof ngDevMode === 'undefined' || ngDevMode\r\n        ? { provide: ROUTER_IS_PROVIDED, useValue: true }\r\n        : [],\r\n];\r\n/**\r\n * @description\r\n *\r\n * Adds directives and providers for in-app navigation among views defined in an application.\r\n * Use the Angular `Router` service to declaratively specify application states and manage state\r\n * transitions.\r\n *\r\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\r\n * However, only one `Router` service can be active.\r\n * To ensure this, there are two ways to register routes when importing this module:\r\n *\r\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\r\n * routes, and the `Router` service itself.\r\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\r\n * routes, but does not include the `Router` service.\r\n *\r\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\r\n * overview of how the `Router` service should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass RouterModule {\r\n    constructor() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            inject(ROUTER_FORROOT_GUARD, { optional: true });\r\n        }\r\n    }\r\n    /**\r\n     * Creates and configures a module with all the router providers and directives.\r\n     * Optionally sets up an application listener to perform an initial navigation.\r\n     *\r\n     * When registering the NgModule at the root, import as follows:\r\n     *\r\n     * ```ts\r\n     * @NgModule({\r\n     *   imports: [RouterModule.forRoot(ROUTES)]\r\n     * })\r\n     * class MyNgModule {}\r\n     * ```\r\n     *\r\n     * @param routes An array of `Route` objects that define the navigation paths for the application.\r\n     * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\r\n     * @return The new `NgModule`.\r\n     *\r\n     */\r\n    static forRoot(routes, config) {\r\n        return {\r\n            ngModule: RouterModule,\r\n            providers: [\r\n                ROUTER_PROVIDERS,\r\n                typeof ngDevMode === 'undefined' || ngDevMode\r\n                    ? config?.enableTracing\r\n                        ? withDebugTracing().ɵproviders\r\n                        : []\r\n                    : [],\r\n                { provide: ROUTES, multi: true, useValue: routes },\r\n                typeof ngDevMode === 'undefined' || ngDevMode\r\n                    ? {\r\n                        provide: ROUTER_FORROOT_GUARD,\r\n                        useFactory: provideForRootGuard,\r\n                        deps: [[Router, new Optional(), new SkipSelf()]],\r\n                    }\r\n                    : [],\r\n                config?.errorHandler\r\n                    ? {\r\n                        provide: NAVIGATION_ERROR_HANDLER,\r\n                        useValue: config.errorHandler,\r\n                    }\r\n                    : [],\r\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\r\n                config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(),\r\n                provideRouterScroller(),\r\n                config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [],\r\n                config?.initialNavigation ? provideInitialNavigation(config) : [],\r\n                config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [],\r\n                config?.enableViewTransitions ? withViewTransitions().ɵproviders : [],\r\n                provideRouterInitializer(),\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Creates a module with all the router directives and a provider registering routes,\r\n     * without creating a new Router service.\r\n     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\r\n     *\r\n     * ```ts\r\n     * @NgModule({\r\n     *   imports: [RouterModule.forChild(ROUTES)]\r\n     * })\r\n     * class MyNgModule {}\r\n     * ```\r\n     *\r\n     * @param routes An array of `Route` objects that define the navigation paths for the submodule.\r\n     * @return The new NgModule.\r\n     *\r\n     */\r\n    static forChild(routes) {\r\n        return {\r\n            ngModule: RouterModule,\r\n            providers: [{ provide: ROUTES, multi: true, useValue: routes }],\r\n        };\r\n    }\r\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterModule, imports: [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent], exports: [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent] });\r\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterModule });\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.11\", ngImport: i0, type: RouterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: ROUTER_DIRECTIVES,\r\n                    exports: ROUTER_DIRECTIVES,\r\n                }]\r\n        }], ctorParameters: () => [] });\r\n/**\r\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\r\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\r\n */\r\nfunction provideRouterScroller() {\r\n    return {\r\n        provide: ROUTER_SCROLLER,\r\n        useFactory: () => {\r\n            const viewportScroller = inject(ViewportScroller);\r\n            const zone = inject(NgZone);\r\n            const config = inject(ROUTER_CONFIGURATION);\r\n            const transitions = inject(NavigationTransitions);\r\n            const urlSerializer = inject(UrlSerializer);\r\n            if (config.scrollOffset) {\r\n                viewportScroller.setOffset(config.scrollOffset);\r\n            }\r\n            return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\r\n        },\r\n    };\r\n}\r\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\r\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\r\nfunction provideHashLocationStrategy() {\r\n    return { provide: LocationStrategy, useClass: HashLocationStrategy };\r\n}\r\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\r\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\r\nfunction providePathLocationStrategy() {\r\n    return { provide: LocationStrategy, useClass: PathLocationStrategy };\r\n}\r\nfunction provideForRootGuard(router) {\r\n    if (router) {\r\n        throw new _RuntimeError(4007 /* RuntimeErrorCode.FOR_ROOT_CALLED_TWICE */, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` +\r\n            ` Lazy loaded modules should use RouterModule.forChild() instead.`);\r\n    }\r\n    return 'guarded';\r\n}\r\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\r\n// users call `withXInitialNavigation` directly.\r\nfunction provideInitialNavigation(config) {\r\n    return [\r\n        config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [],\r\n        config.initialNavigation === 'enabledBlocking'\r\n            ? withEnabledBlockingInitialNavigation().ɵproviders\r\n            : [],\r\n    ];\r\n}\r\n// TODO(atscott): This should not be in the public API\r\n/**\r\n * A DI token for the router initializer that\r\n * is called after the app is bootstrapped.\r\n *\r\n * @publicApi\r\n */\r\nconst ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '');\r\nfunction provideRouterInitializer() {\r\n    return [\r\n        // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\r\n        // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\r\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener },\r\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\r\n    ];\r\n}\r\n\r\nexport { NoPreloading, PreloadAllModules, PreloadingStrategy, ROUTER_INITIALIZER, ROUTER_PROVIDERS, RouterLink, RouterLinkActive, RouterModule, RouterPreloader, provideRouter, provideRoutes, withComponentInputBinding, withDebugTracing, withDisabledInitialNavigation, withEnabledBlockingInitialNavigation, withHashLocation, withInMemoryScrolling, withNavigationErrorHandler, withPreloading, withRouterConfig, withViewTransitions };\r\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE,MAAM,iBAAiB;AACrC,SAASC,oBAAoB,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,QAAQ,EAAEC,oBAAoB,QAAQ,iBAAiB;AAChJ,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,aAAa,IAAIC,aAAa,EAAEC,0BAA0B,IAAIC,0BAA0B,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,KAAK,EAAEC,WAAW,EAAEC,SAAS,EAAEC,SAAS,EAAEC,YAAY,EAAEC,MAAM,EAAEC,eAAe,EAAEC,QAAQ,EAAEC,yBAAyB,EAAEC,UAAU,EAAEC,cAAc,EAAEC,uBAAuB,IAAIC,uBAAuB,EAAEC,wBAAwB,EAAEC,sBAAsB,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,eAAe;AAC3gB,SAASC,aAAa,EAAEC,SAAS,EAAEC,MAAM,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,qBAAqB,EAAEC,MAAM,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,MAAM,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,wBAAwB,EAAEC,0BAA0B,EAAEC,YAAY,EAAEC,oBAAoB,EAAEC,sBAAsB,EAAEC,uBAAuB,EAAEC,cAAc,EAAEC,oBAAoB,EAAEC,sBAAsB,EAAEC,YAAY,EAAEC,qBAAqB,IAAIC,qBAAqB,QAAQ,uBAAuB;AAC/gB,SAASC,OAAO,EAAEC,EAAE,EAAEC,IAAI,QAAQ,MAAM;AACxC,SAASC,QAAQ,EAAEC,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,gBAAgB;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACbC,MAAM;EACNC,KAAK;EACLC,iBAAiB;EACjBC,QAAQ;EACRC,EAAE;EACFC,gBAAgB;EAChB;AACJ;AACA;AACA;EACIC,IAAI,GAAG,IAAI;EACX;AACJ;AACA;AACA;EACIC,MAAM;EACN;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW;EACX;AACJ;AACA;AACA;AACA;AACA;EACIC,QAAQ;EACR;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmB;EACnB;AACJ;AACA;AACA;AACA;AACA;EACIC,KAAK;EACL;AACJ;AACA;AACA;AACA;AACA;EACIC,IAAI;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU;EACV;EACAC,eAAe;EACfC,YAAY;EACZ;EACAC,SAAS,GAAG,IAAIzB,OAAO,CAAC,CAAC;EACzB0B,WAAWA,CAACjB,MAAM,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,gBAAgB,EAAE;IAC1E,IAAI,CAACL,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,MAAMa,OAAO,GAAGd,EAAE,CAACe,aAAa,CAACD,OAAO,EAAEE,WAAW,CAAC,CAAC;IACvD,IAAI,CAACN,eAAe,GA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C,IAAI,EAAEhI;IACV,CAAC,CAAC;IAAEoG,OAAO,EAAE,CAAC;MACV4B,IAAI,EAAEjI,YAAY;MAClBgJ,IAAI,EAAE,CAAC,OAAO,EAAE,CACR,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,eAAe,EACf,gBAAgB,CACnB;IACT,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,gBAAgB,CAAC;EACnBxF,MAAM;EACNyF,OAAO;EACPtF,QAAQ;EACRuF,GAAG;EACHC,IAAI;EACJC,KAAK;EACLC,OAAO,GAAG,EAAE;EACZC,wBAAwB;EACxBC,4BAA4B;EAC5BC,SAAS,GAAG,KAAK;EACjB,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACD,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,uBAAuB,GAAG;IAAEC,KAAK,EAAE;EAAM,CAAC;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,qBAAqB;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,cAAc,GAAG,IAAI5J,YAAY,CAAC,CAAC;EACnCwE,WAAWA,CAACjB,MAAM,EAAEyF,OAAO,EAAEtF,QAAQ,EAAEuF,GAAG,EAAEC,IAAI,EAAE;IAC9C,IAAI,CAAC3F,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACyF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACtF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACuF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,wBAAwB,GAAG9F,MAAM,CAACqB,MAAM,CAACC,SAAS,CAAEC,CAAC,IAAK;MAC3D,IAAIA,CAAC,YAAY1D,aAAa,EAAE;QAC5B,IAAI,CAACyI,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;EACN;EACA;EACAC,kBAAkBA,CAAA,EAAG;IACjB;IACA/G,EAAE,CAAC,IAAI,CAACoG,KAAK,CAAC5D,OAAO,EAAExC,EAAE,CAAC,IAAI,CAAC,CAAC,CAC3BgH,IAAI,CAAC9G,QAAQ,CAAC,CAAC,CAAC,CAChB4B,SAAS,CAAEmF,CAAC,IAAK;MAClB,IAAI,CAACH,MAAM,CAAC,CAAC;MACb,IAAI,CAACI,4BAA4B,CAAC,CAAC;IACvC,CAAC,CAAC;EACN;EACAA,4BAA4BA,CAAA,EAAG;IAC3B,IAAI,CAACX,4BAA4B,EAAE5C,WAAW,CAAC,CAAC;IAChD,MAAMwD,cAAc,GAAG,CAAC,GAAG,IAAI,CAACf,KAAK,CAACgB,OAAO,CAAC,CAAC,EAAE,IAAI,CAACjB,IAAI,CAAC,CACtD/F,MAAM,CAAE+F,IAAI,IAAK,CAAC,CAACA,IAAI,CAAC,CACxBkB,GAAG,CAAElB,IAAI,IAAKA,IAAI,CAAC3E,SAAS,CAAC;IAClC,IAAI,CAAC+E,4BAA4B,GAAGtG,IAAI,CAACkH,cAAc,CAAC,CACnDH,IAAI,CAAC9G,QAAQ,CAAC,CAAC,CAAC,CAChB4B,SAAS,CAAEqE,IAAI,IAAK;MACrB,IAAI,IAAI,CAACK,SAAS,KAAK,IAAI,CAACc,YAAY,CAAC,IAAI,CAAC9G,MAAM,CAAC,CAAC2F,IAAI,CAAC,EAAE;QACzD,IAAI,CAACW,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;EACN;EACA,IAAIS,gBAAgBA,CAACC,IAAI,EAAE;IACvB,MAAMnB,OAAO,GAAGtD,KAAK,CAACC,OAAO,CAACwE,IAAI,CAAC,GAAGA,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IAC5D,IAAI,CAACpB,OAAO,GAAGA,OAAO,CAACjG,MAAM,CAAEsH,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;EAC7C;EACA;EACAnF,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACsE,MAAM,CAAC,CAAC;EACjB;EACA;EACApD,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC4C,wBAAwB,CAAC3C,WAAW,CAAC,CAAC;IAC3C,IAAI,CAAC4C,4BAA4B,EAAE5C,WAAW,CAAC,CAAC;EACpD;EACAmD,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACV,KAAK,IAAI,CAAC,IAAI,CAAC5F,MAAM,CAACmH,SAAS,EACrC;IACJC,cAAc,CAAC,MAAM;MACjB,MAAMC,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;MAC5C,IAAI,CAACxB,OAAO,CAACyB,OAAO,CAAEJ,CAAC,IAAK;QACxB,IAAIG,cAAc,EAAE;UAChB,IAAI,CAAClH,QAAQ,CAACoH,QAAQ,CAAC,IAAI,CAAC9B,OAAO,CAACtE,aAAa,EAAE+F,CAAC,CAAC;QACzD,CAAC,MACI;UACD,IAAI,CAAC/G,QAAQ,CAACqH,WAAW,CAAC,IAAI,CAAC/B,OAAO,CAACtE,aAAa,EAAE+F,CAAC,CAAC;QAC5D;MACJ,CAAC,CAAC;MACF,IAAIG,cAAc,IAAI,IAAI,CAACjB,qBAAqB,KAAKjE,SAAS,EAAE;QAC5D,IAAI,CAAChC,QAAQ,CAACsD,YAAY,CAAC,IAAI,CAACgC,OAAO,CAACtE,aAAa,EAAE,cAAc,EAAE,IAAI,CAACiF,qBAAqB,CAACqB,QAAQ,CAAC,CAAC,CAAC;MACjH,CAAC,MACI;QACD,IAAI,CAACtH,QAAQ,CAACuD,eAAe,CAAC,IAAI,CAAC+B,OAAO,CAACtE,aAAa,EAAE,cAAc,CAAC;MAC7E;MACA;MACA,IAAI,IAAI,CAAC6E,SAAS,KAAKqB,cAAc,EAAE;QACnC,IAAI,CAACrB,SAAS,GAAGqB,cAAc;QAC/B,IAAI,CAAC3B,GAAG,CAACgC,YAAY,CAAC,CAAC;QACvB;QACA,IAAI,CAACrB,cAAc,CAACsB,IAAI,CAACN,cAAc,CAAC;MAC5C;IACJ,CAAC,CAAC;EACN;EACAP,YAAYA,CAAC9G,MAAM,EAAE;IACjB,MAAM4H,OAAO,GAAGC,oBAAoB,CAAC,IAAI,CAAC3B,uBAAuB,CAAC,GAC5D,IAAI,CAACA,uBAAuB;IAC5B;IACE,IAAI,CAACA,uBAAuB,CAACC,KAAK,IAAI,KAAK;IACnD,OAAQR,IAAI,IAAK;MACb,MAAM5C,OAAO,GAAG4C,IAAI,CAAC5C,OAAO;MAC5B,OAAOA,OAAO,GAAG/C,MAAM,CAACiG,QAAQ,CAAClD,OAAO,EAAE6E,OAAO,CAAC,GAAG,KAAK;IAC9D,CAAC;EACL;EACAP,cAAcA,CAAA,EAAG;IACb,MAAMS,eAAe,GAAG,IAAI,CAAChB,YAAY,CAAC,IAAI,CAAC9G,MAAM,CAAC;IACtD,OAAQ,IAAI,CAAC2F,IAAI,IAAImC,eAAe,CAAC,IAAI,CAACnC,IAAI,CAAC,IAAK,IAAI,CAACC,KAAK,CAACmC,IAAI,CAACD,eAAe,CAAC;EACxF;EACA,OAAOlE,IAAI,YAAAoE,yBAAAlE,iBAAA;IAAA,YAAAA,iBAAA,IAAyF0B,gBAAgB,EAhQ1B1J,EAAE,CAAAiI,iBAAA,CAgQ0ChG,MAAM,GAhQlDjC,EAAE,CAAAiI,iBAAA,CAgQ6DjI,EAAE,CAACoI,UAAU,GAhQ5EpI,EAAE,CAAAiI,iBAAA,CAgQuFjI,EAAE,CAACmI,SAAS,GAhQrGnI,EAAE,CAAAiI,iBAAA,CAgQgHjI,EAAE,CAACmM,iBAAiB,GAhQtInM,EAAE,CAAAiI,iBAAA,CAgQiJhE,UAAU;EAAA;EACvP,OAAOoE,IAAI,kBAjQ+ErI,EAAE,CAAAsI,iBAAA;IAAAC,IAAA,EAiQJmB,gBAAgB;IAAAlB,SAAA;IAAA4D,cAAA,WAAAC,gCAAAzD,EAAA,EAAAC,GAAA,EAAAyD,QAAA;MAAA,IAAA1D,EAAA;QAjQd5I,EAAE,CAAAuM,cAAA,CAAAD,QAAA,EAiQqTrI,UAAU;MAAA;MAAA,IAAA2E,EAAA;QAAA,IAAA4D,EAAA;QAjQjUxM,EAAE,CAAAyM,cAAA,CAAAD,EAAA,GAAFxM,EAAE,CAAA0M,WAAA,QAAA7D,GAAA,CAAAiB,KAAA,GAAA0C,EAAA;MAAA;IAAA;IAAAtD,MAAA;MAAAkB,uBAAA;MAAAE,qBAAA;MAAAW,gBAAA;IAAA;IAAA0B,OAAA;MAAApC,cAAA;IAAA;IAAAqC,QAAA;IAAAzD,QAAA,GAAFnJ,EAAE,CAAAoJ,oBAAA;EAAA;AAkQhG;AACA;EAAA,QAAAjD,SAAA,oBAAAA,SAAA,KAnQ8FnG,EAAE,CAAAqJ,iBAAA,CAmQJK,gBAAgB,EAAc,CAAC;IAC/GnB,IAAI,EAAE7H,SAAS;IACf4I,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,oBAAoB;MAC9BqD,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAErE,IAAI,EAAEtG;EAAO,CAAC,EAAE;IAAEsG,IAAI,EAAEvI,EAAE,CAACoI;EAAW,CAAC,EAAE;IAAEG,IAAI,EAAEvI,EAAE,CAACmI;EAAU,CAAC,EAAE;IAAEI,IAAI,EAAEvI,EAAE,CAACmM;EAAkB,CAAC,EAAE;IAAE5D,IAAI,EAAEtE,UAAU;IAAEuF,UAAU,EAAE,CAAC;MACnJjB,IAAI,EAAEzH;IACV,CAAC;EAAE,CAAC,CAAC,EAAkB;IAAEgJ,KAAK,EAAE,CAAC;MACjCvB,IAAI,EAAE1H,eAAe;MACrByI,IAAI,EAAE,CAACrF,UAAU,EAAE;QAAE4I,WAAW,EAAE;MAAK,CAAC;IAC5C,CAAC,CAAC;IAAEzC,uBAAuB,EAAE,CAAC;MAC1B7B,IAAI,EAAEhI;IACV,CAAC,CAAC;IAAE+J,qBAAqB,EAAE,CAAC;MACxB/B,IAAI,EAAEhI;IACV,CAAC,CAAC;IAAEgK,cAAc,EAAE,CAAC;MACjBhC,IAAI,EAAE3H;IACV,CAAC,CAAC;IAAEqK,gBAAgB,EAAE,CAAC;MACnB1C,IAAI,EAAEhI;IACV,CAAC;EAAE,CAAC;AAAA;AAChB;AACA;AACA;AACA,SAASwL,oBAAoBA,CAACD,OAAO,EAAE;EACnC,OAAO,CAAC,CAACA,OAAO,CAACgB,KAAK;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACpBC,OAAOA,CAAC9I,KAAK,EAAE+I,EAAE,EAAE;IACf,OAAOA,EAAE,CAAC,CAAC,CAACxC,IAAI,CAAC7G,UAAU,CAAC,MAAMH,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD;EACA,OAAOoE,IAAI,YAAAqF,0BAAAnF,iBAAA;IAAA,YAAAA,iBAAA,IAAyFgF,iBAAiB;EAAA;EACrH,OAAOI,KAAK,kBAvT8EpN,EAAE,CAAAqN,kBAAA;IAAAC,KAAA,EAuTYN,iBAAiB;IAAAO,OAAA,EAAjBP,iBAAiB,CAAAlF,IAAA;IAAA0F,UAAA,EAAc;EAAM;AACjJ;AACA;EAAA,QAAArH,SAAA,oBAAAA,SAAA,KAzT8FnG,EAAE,CAAAqJ,iBAAA,CAyTJ2D,iBAAiB,EAAc,CAAC;IAChHzE,IAAI,EAAEvH,UAAU;IAChBsI,IAAI,EAAE,CAAC;MAAEkE,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC;AAAA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACfR,OAAOA,CAAC9I,KAAK,EAAE+I,EAAE,EAAE;IACf,OAAOxJ,EAAE,CAAC,IAAI,CAAC;EACnB;EACA,OAAOoE,IAAI,YAAA4F,qBAAA1F,iBAAA;IAAA,YAAAA,iBAAA,IAAyFyF,YAAY;EAAA;EAChH,OAAOL,KAAK,kBA3U8EpN,EAAE,CAAAqN,kBAAA;IAAAC,KAAA,EA2UYG,YAAY;IAAAF,OAAA,EAAZE,YAAY,CAAA3F,IAAA;IAAA0F,UAAA,EAAc;EAAM;AAC5I;AACA;EAAA,QAAArH,SAAA,oBAAAA,SAAA,KA7U8FnG,EAAE,CAAAqJ,iBAAA,CA6UJoE,YAAY,EAAc,CAAC;IAC3GlF,IAAI,EAAEvH,UAAU;IAChBsI,IAAI,EAAE,CAAC;MAAEkE,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC;AAAA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,eAAe,CAAC;EAClBzJ,MAAM;EACN0J,QAAQ;EACRC,kBAAkB;EAClBC,MAAM;EACN7I,YAAY;EACZE,WAAWA,CAACjB,MAAM,EAAE0J,QAAQ,EAAEC,kBAAkB,EAAEC,MAAM,EAAE;IACtD,IAAI,CAAC5J,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC0J,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACAC,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC9I,YAAY,GAAG,IAAI,CAACf,MAAM,CAACqB,MAAM,CACjCmF,IAAI,CAAC5G,MAAM,CAAEkK,CAAC,IAAKA,CAAC,YAAYjM,aAAa,CAAC,EAAEgC,SAAS,CAAC,MAAM,IAAI,CAACkJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAChFzH,SAAS,CAAC,MAAM,CAAE,CAAC,CAAC;EAC7B;EACAyH,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACgB,aAAa,CAAC,IAAI,CAACL,QAAQ,EAAE,IAAI,CAAC1J,MAAM,CAACgK,MAAM,CAAC;EAChE;EACA;EACA9G,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACnC,YAAY,EAAE;MACnB,IAAI,CAACA,YAAY,CAACoC,WAAW,CAAC,CAAC;IACnC;EACJ;EACA4G,aAAaA,CAACL,QAAQ,EAAEO,MAAM,EAAE;IAC5B,MAAMC,GAAG,GAAG,EAAE;IACd,KAAK,MAAMjK,KAAK,IAAIgK,MAAM,EAAE;MACxB,IAAIhK,KAAK,CAACkK,SAAS,IAAI,CAAClK,KAAK,CAACmK,SAAS,EAAE;QACrCnK,KAAK,CAACmK,SAAS,GAAGvN,yBAAyB,CAACoD,KAAK,CAACkK,SAAS,EAAET,QAAQ,EAAE,UAAUzJ,KAAK,CAACoK,IAAI,EAAE,CAAC;MAClG;MACA,MAAMC,uBAAuB,GAAGrK,KAAK,CAACmK,SAAS,IAAIV,QAAQ;MAC3D,MAAMa,mBAAmB,GAAGtK,KAAK,CAACuK,eAAe,IAAIF,uBAAuB;MAC5E;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAKrK,KAAK,CAACwK,YAAY,IAAI,CAACxK,KAAK,CAACyK,aAAa,IAAIzK,KAAK,CAAC0K,OAAO,KAAKxI,SAAS,IACzElC,KAAK,CAAC2K,aAAa,IAAI,CAAC3K,KAAK,CAAC4K,gBAAiB,EAAE;QAClDX,GAAG,CAACY,IAAI,CAAC,IAAI,CAACC,aAAa,CAACT,uBAAuB,EAAErK,KAAK,CAAC,CAAC;MAChE;MACA,IAAIA,KAAK,CAAC+K,QAAQ,IAAI/K,KAAK,CAACyK,aAAa,EAAE;QACvCR,GAAG,CAACY,IAAI,CAAC,IAAI,CAACf,aAAa,CAACQ,mBAAmB,EAAGtK,KAAK,CAAC+K,QAAQ,IAAI/K,KAAK,CAACyK,aAAc,CAAC,CAAC;MAC9F;IACJ;IACA,OAAOjL,IAAI,CAACyK,GAAG,CAAC,CAAC1D,IAAI,CAAC9G,QAAQ,CAAC,CAAC,CAAC;EACrC;EACAqL,aAAaA,CAACrB,QAAQ,EAAEzJ,KAAK,EAAE;IAC3B,OAAO,IAAI,CAAC0J,kBAAkB,CAACZ,OAAO,CAAC9I,KAAK,EAAE,MAAM;MAChD,IAAIgL,eAAe;MACnB,IAAIhL,KAAK,CAACwK,YAAY,IAAIxK,KAAK,CAAC0K,OAAO,KAAKxI,SAAS,EAAE;QACnD8I,eAAe,GAAG,IAAI,CAACrB,MAAM,CAACa,YAAY,CAACf,QAAQ,EAAEzJ,KAAK,CAAC;MAC/D,CAAC,MACI;QACDgL,eAAe,GAAGzL,EAAE,CAAC,IAAI,CAAC;MAC9B;MACA,MAAM0L,sBAAsB,GAAGD,eAAe,CAACzE,IAAI,CAAC1G,QAAQ,CAAEkK,MAAM,IAAK;QACrE,IAAIA,MAAM,KAAK,IAAI,EAAE;UACjB,OAAOxK,EAAE,CAAC,KAAK,CAAC,CAAC;QACrB;QACAS,KAAK,CAACyK,aAAa,GAAGV,MAAM,CAACC,MAAM;QACnChK,KAAK,CAACuK,eAAe,GAAGR,MAAM,CAACN,QAAQ;QACvC;QACA;QACA,OAAO,IAAI,CAACK,aAAa,CAACC,MAAM,CAACN,QAAQ,IAAIA,QAAQ,EAAEM,MAAM,CAACC,MAAM,CAAC;MACzE,CAAC,CAAC,CAAC;MACH,IAAIhK,KAAK,CAAC2K,aAAa,IAAI,CAAC3K,KAAK,CAAC4K,gBAAgB,EAAE;QAChD,MAAMM,cAAc,GAAG,IAAI,CAACvB,MAAM,CAACgB,aAAa,CAAC3K,KAAK,CAAC;QACvD,OAAOR,IAAI,CAAC,CAACyL,sBAAsB,EAAEC,cAAc,CAAC,CAAC,CAAC3E,IAAI,CAAC9G,QAAQ,CAAC,CAAC,CAAC;MAC1E,CAAC,MACI;QACD,OAAOwL,sBAAsB;MACjC;IACJ,CAAC,CAAC;EACN;EACA,OAAOtH,IAAI,YAAAwH,wBAAAtH,iBAAA;IAAA,YAAAA,iBAAA,IAAyF2F,eAAe,EA7azB3N,EAAE,CAAAuP,QAAA,CA6ayCtN,MAAM,GA7ajDjC,EAAE,CAAAuP,QAAA,CA6a4DvP,EAAE,CAACwP,mBAAmB,GA7apFxP,EAAE,CAAAuP,QAAA,CA6a+FxC,kBAAkB,GA7anH/M,EAAE,CAAAuP,QAAA,CA6a8HpN,kBAAkB;EAAA;EAC5O,OAAOiL,KAAK,kBA9a8EpN,EAAE,CAAAqN,kBAAA;IAAAC,KAAA,EA8aYK,eAAe;IAAAJ,OAAA,EAAfI,eAAe,CAAA7F,IAAA;IAAA0F,UAAA,EAAc;EAAM;AAC/I;AACA;EAAA,QAAArH,SAAA,oBAAAA,SAAA,KAhb8FnG,EAAE,CAAAqJ,iBAAA,CAgbJsE,eAAe,EAAc,CAAC;IAC9GpF,IAAI,EAAEvH,UAAU;IAChBsI,IAAI,EAAE,CAAC;MAAEkE,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEjF,IAAI,EAAEtG;EAAO,CAAC,EAAE;IAAEsG,IAAI,EAAEvI,EAAE,CAACwP;EAAoB,CAAC,EAAE;IAAEjH,IAAI,EAAEwE;EAAmB,CAAC,EAAE;IAAExE,IAAI,EAAEpG;EAAmB,CAAC,CAAC;AAAA;AAElJ,MAAMsN,eAAe,GAAG,IAAIxO,cAAc,CAAC,EAAE,CAAC;AAC9C,MAAMyO,cAAc,CAAC;EACjBC,aAAa;EACbC,WAAW;EACXC,gBAAgB;EAChBC,IAAI;EACJhE,OAAO;EACP9B,wBAAwB;EACxB+F,wBAAwB;EACxBC,MAAM,GAAG,CAAC;EACVC,UAAU,GAAG,YAAY;EACzBC,UAAU,GAAG,CAAC;EACdC,KAAK,GAAG,CAAC,CAAC;EACV;EACAhL,WAAWA,CAACwK,aAAa,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,IAAI,EAAEhE,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1E,IAAI,CAAC6D,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAChE,OAAO,GAAGA,OAAO;IACtB;IACAA,OAAO,CAACsE,yBAAyB,KAAK,UAAU;IAChDtE,OAAO,CAACuE,eAAe,KAAK,UAAU;EAC1C;EACAC,IAAIA,CAAA,EAAG;IACH;IACA;IACA;IACA,IAAI,IAAI,CAACxE,OAAO,CAACsE,yBAAyB,KAAK,UAAU,EAAE;MACvD,IAAI,CAACP,gBAAgB,CAACU,2BAA2B,CAAC,QAAQ,CAAC;IAC/D;IACA,IAAI,CAACvG,wBAAwB,GAAG,IAAI,CAACwG,kBAAkB,CAAC,CAAC;IACzD,IAAI,CAACT,wBAAwB,GAAG,IAAI,CAACU,mBAAmB,CAAC,CAAC;EAC9D;EACAD,kBAAkBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACZ,WAAW,CAACrK,MAAM,CAACC,SAAS,CAAEwI,CAAC,IAAK;MAC5C,IAAIA,CAAC,YAAY5L,eAAe,EAAE;QAC9B;QACA,IAAI,CAAC+N,KAAK,CAAC,IAAI,CAACH,MAAM,CAAC,GAAG,IAAI,CAACH,gBAAgB,CAACa,iBAAiB,CAAC,CAAC;QACnE,IAAI,CAACT,UAAU,GAAGjC,CAAC,CAAC2C,iBAAiB;QACrC,IAAI,CAACT,UAAU,GAAGlC,CAAC,CAAC4C,aAAa,GAAG5C,CAAC,CAAC4C,aAAa,CAACC,YAAY,GAAG,CAAC;MACxE,CAAC,MACI,IAAI7C,CAAC,YAAYjM,aAAa,EAAE;QACjC,IAAI,CAACiO,MAAM,GAAGhC,CAAC,CAAC8C,EAAE;QAClB,IAAI,CAACC,mBAAmB,CAAC/C,CAAC,EAAE,IAAI,CAAC2B,aAAa,CAACqB,KAAK,CAAChD,CAAC,CAACiD,iBAAiB,CAAC,CAACtM,QAAQ,CAAC;MACvF,CAAC,MACI,IAAIqJ,CAAC,YAAY3L,iBAAiB,IACnC2L,CAAC,CAACkD,IAAI,KAAK5O,qBAAqB,CAAC6O,wBAAwB,EAAE;QAC3D,IAAI,CAAClB,UAAU,GAAG5J,SAAS;QAC3B,IAAI,CAAC6J,UAAU,GAAG,CAAC;QACnB,IAAI,CAACa,mBAAmB,CAAC/C,CAAC,EAAE,IAAI,CAAC2B,aAAa,CAACqB,KAAK,CAAChD,CAAC,CAACoD,GAAG,CAAC,CAACzM,QAAQ,CAAC;MACzE;IACJ,CAAC,CAAC;EACN;EACA8L,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACb,WAAW,CAACrK,MAAM,CAACC,SAAS,CAAEwI,CAAC,IAAK;MAC5C,IAAI,EAAEA,CAAC,YAAYzL,MAAM,CAAC,EACtB;MACJ;MACA,IAAIyL,CAAC,CAACqD,QAAQ,EAAE;QACZ,IAAI,IAAI,CAACvF,OAAO,CAACsE,yBAAyB,KAAK,KAAK,EAAE;UAClD,IAAI,CAACP,gBAAgB,CAACyB,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC,MACI,IAAI,IAAI,CAACxF,OAAO,CAACsE,yBAAyB,KAAK,SAAS,EAAE;UAC3D,IAAI,CAACP,gBAAgB,CAACyB,gBAAgB,CAACtD,CAAC,CAACqD,QAAQ,CAAC;QACtD;QACA;MACJ,CAAC,MACI;QACD,IAAIrD,CAAC,CAACuD,MAAM,IAAI,IAAI,CAACzF,OAAO,CAACuE,eAAe,KAAK,SAAS,EAAE;UACxD,IAAI,CAACR,gBAAgB,CAAC2B,cAAc,CAACxD,CAAC,CAACuD,MAAM,CAAC;QAClD,CAAC,MACI,IAAI,IAAI,CAACzF,OAAO,CAACsE,yBAAyB,KAAK,UAAU,EAAE;UAC5D,IAAI,CAACP,gBAAgB,CAACyB,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD;MACJ;IACJ,CAAC,CAAC;EACN;EACAP,mBAAmBA,CAACU,WAAW,EAAEF,MAAM,EAAE;IACrC,IAAI,CAACzB,IAAI,CAAC4B,iBAAiB,CAAC,MAAM;MAC9B;MACA;MACA;MACAC,UAAU,CAAC,MAAM;QACb,IAAI,CAAC7B,IAAI,CAAC8B,GAAG,CAAC,MAAM;UAChB,IAAI,CAAChC,WAAW,CAACrK,MAAM,CAACe,IAAI,CAAC,IAAI/D,MAAM,CAACkP,WAAW,EAAE,IAAI,CAACxB,UAAU,KAAK,UAAU,GAAG,IAAI,CAACE,KAAK,CAAC,IAAI,CAACD,UAAU,CAAC,GAAG,IAAI,EAAEqB,MAAM,CAAC,CAAC;QACtI,CAAC,CAAC;MACN,CAAC,EAAE,CAAC,CAAC;IACT,CAAC,CAAC;EACN;EACA;EACAnK,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC4C,wBAAwB,EAAE3C,WAAW,CAAC,CAAC;IAC5C,IAAI,CAAC0I,wBAAwB,EAAE1I,WAAW,CAAC,CAAC;EAChD;EACA,OAAOS,IAAI,YAAA+J,uBAAA7J,iBAAA;IAphB+EhI,EAAE,CAAA8R,gBAAA;EAAA;EAqhB5F,OAAO1E,KAAK,kBArhB8EpN,EAAE,CAAAqN,kBAAA;IAAAC,KAAA,EAqhBYoC,cAAc;IAAAnC,OAAA,EAAdmC,cAAc,CAAA5H;EAAA;AAC1H;AACA;EAAA,QAAA3B,SAAA,oBAAAA,SAAA,KAvhB8FnG,EAAE,CAAAqJ,iBAAA,CAuhBJqG,cAAc,EAAc,CAAC;IAC7GnH,IAAI,EAAEvH;EACV,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEuH,IAAI,EAAE/F;EAAc,CAAC,EAAE;IAAE+F,IAAI,EAAE9F;EAAsB,CAAC,EAAE;IAAE8F,IAAI,EAAE9I,EAAE,CAACI;EAAiB,CAAC,EAAE;IAAE0I,IAAI,EAAEvI,EAAE,CAAC4B;EAAO,CAAC,EAAE;IAAE2G,IAAI,EAAElC;EAAU,CAAC,CAAC;AAAA;;AAErK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0L,aAAaA,CAAC5D,MAAM,EAAE,GAAGhF,QAAQ,EAAE;EACxC,OAAO/H,wBAAwB,CAAC,CAC5B;IAAE4Q,OAAO,EAAEtP,MAAM;IAAEuP,KAAK,EAAE,IAAI;IAAEC,QAAQ,EAAE/D;EAAO,CAAC,EAClD,OAAOhI,SAAS,KAAK,WAAW,IAAIA,SAAS,GACvC;IAAE6L,OAAO,EAAEG,kBAAkB;IAAED,QAAQ,EAAE;EAAK,CAAC,GAC/C,EAAE,EACR;IAAEF,OAAO,EAAE9P,cAAc;IAAEkQ,UAAU,EAAEC,SAAS;IAAEC,IAAI,EAAE,CAACrQ,MAAM;EAAE,CAAC,EAClE;IAAE+P,OAAO,EAAE3Q,sBAAsB;IAAE4Q,KAAK,EAAE,IAAI;IAAEG,UAAU,EAAEG;EAAqB,CAAC,EAClFpJ,QAAQ,CAAC4B,GAAG,CAAEyH,OAAO,IAAKA,OAAO,CAACC,UAAU,CAAC,CAChD,CAAC;AACN;AACA,SAASJ,SAASA,CAACnO,MAAM,EAAE;EACvB,OAAOA,MAAM,CAACwO,WAAW,CAACC,IAAI;AAClC;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,IAAI,EAAExE,SAAS,EAAE;EACpC,OAAO;IAAEyE,KAAK,EAAED,IAAI;IAAEJ,UAAU,EAAEpE;EAAU,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA,MAAM8D,kBAAkB,GAAG,IAAIlR,cAAc,CAAC,EAAE,EAAE;EAC9CuM,UAAU,EAAE,MAAM;EAClBD,OAAO,EAAEA,CAAA,KAAM;AACnB,CAAC,CAAC;AACF,MAAMwF,4BAA4B,GAAG;EACjCf,OAAO,EAAE1Q,uBAAuB;EAChC2Q,KAAK,EAAE,IAAI;EACXG,UAAUA,CAAA,EAAG;IACT,OAAO,MAAM;MACT,IAAI,CAAC5Q,MAAM,CAAC2Q,kBAAkB,CAAC,EAAE;QAC7Ba,OAAO,CAACC,IAAI,CAAC,gFAAgF,GACzF,2BAA2B,CAAC;MACpC;IACJ,CAAC;EACL;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAC/E,MAAM,EAAE;EAC3B,OAAO,CACH;IAAE6D,OAAO,EAAEtP,MAAM;IAAEuP,KAAK,EAAE,IAAI;IAAEC,QAAQ,EAAE/D;EAAO,CAAC,EAClD,OAAOhI,SAAS,KAAK,WAAW,IAAIA,SAAS,GAAG4M,4BAA4B,GAAG,EAAE,CACpF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,qBAAqBA,CAACrH,OAAO,GAAG,CAAC,CAAC,EAAE;EACzC,MAAMuC,SAAS,GAAG,CACd;IACI2D,OAAO,EAAEvC,eAAe;IACxB2C,UAAU,EAAEA,CAAA,KAAM;MACd,MAAMvC,gBAAgB,GAAGrO,MAAM,CAAC3B,gBAAgB,CAAC;MACjD,MAAMiQ,IAAI,GAAGtO,MAAM,CAACI,MAAM,CAAC;MAC3B,MAAMgO,WAAW,GAAGpO,MAAM,CAACiB,qBAAqB,CAAC;MACjD,MAAMkN,aAAa,GAAGnO,MAAM,CAACgB,aAAa,CAAC;MAC3C,OAAO,IAAIkN,cAAc,CAACC,aAAa,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,IAAI,EAAEhE,OAAO,CAAC;IAC1F;EACJ,CAAC,CACJ;EACD,OAAO8G,aAAa,CAAC,CAAC,CAAC,kDAAkDvE,SAAS,CAAC;AACvF;AACA,SAASkE,oBAAoBA,CAAA,EAAG;EAC5B,MAAM3E,QAAQ,GAAGpM,MAAM,CAACC,QAAQ,CAAC;EACjC,OAAQ2R,wBAAwB,IAAK;IACjC,MAAMC,GAAG,GAAGzF,QAAQ,CAAC0F,GAAG,CAAC5R,cAAc,CAAC;IACxC,IAAI0R,wBAAwB,KAAKC,GAAG,CAACE,UAAU,CAAC,CAAC,CAAC,EAAE;MAChD;IACJ;IACA,MAAMrP,MAAM,GAAG0J,QAAQ,CAAC0F,GAAG,CAACrR,MAAM,CAAC;IACnC,MAAMuR,aAAa,GAAG5F,QAAQ,CAAC0F,GAAG,CAACG,cAAc,CAAC;IAClD,IAAI7F,QAAQ,CAAC0F,GAAG,CAACI,kBAAkB,CAAC,KAAK,CAAC,CAAC,4CAA4C;MACnFxP,MAAM,CAACyP,iBAAiB,CAAC,CAAC;IAC9B;IACA/F,QAAQ,CAAC0F,GAAG,CAACM,gBAAgB,EAAE,IAAI,EAAEjS,WAAW,CAACb,QAAQ,CAAC,EAAEiN,eAAe,CAAC,CAAC;IAC7EH,QAAQ,CAAC0F,GAAG,CAAC7D,eAAe,EAAE,IAAI,EAAE9N,WAAW,CAACb,QAAQ,CAAC,EAAEwP,IAAI,CAAC,CAAC;IACjEpM,MAAM,CAAC2P,sBAAsB,CAACR,GAAG,CAACS,cAAc,CAAC,CAAC,CAAC,CAAC;IACpD,IAAI,CAACN,aAAa,CAACO,MAAM,EAAE;MACvBP,aAAa,CAAClN,IAAI,CAAC,CAAC;MACpBkN,aAAa,CAACQ,QAAQ,CAAC,CAAC;MACxBR,aAAa,CAACnM,WAAW,CAAC,CAAC;IAC/B;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoM,cAAc,GAAG,IAAIxS,cAAc,CAAC,OAAOkF,SAAS,KAAK,WAAW,IAAIA,SAAS,GAAG,0BAA0B,GAAG,EAAE,EAAE;EACvHoH,OAAO,EAAEA,CAAA,KAAM;IACX,OAAO,IAAI9J,OAAO,CAAC,CAAC;EACxB;AACJ,CAAC,CAAC;AACF,MAAMiQ,kBAAkB,GAAG,IAAIzS,cAAc,CAAC,OAAOkF,SAAS,KAAK,WAAW,IAAIA,SAAS,GAAG,oBAAoB,GAAG,EAAE,EAAE;EAAEqH,UAAU,EAAE,MAAM;EAAED,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAC;AAA2C,CAAC,CAAC;AAC7M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0G,oCAAoCA,CAAA,EAAG;EAC5C,MAAM5F,SAAS,GAAG,CACd;IAAE2D,OAAO,EAAE0B,kBAAkB;IAAExB,QAAQ,EAAE,CAAC,CAAC;EAAwC,CAAC,EACpF3Q,qBAAqB,CAAC,MAAM;IACxB,MAAMqM,QAAQ,GAAGpM,MAAM,CAACC,QAAQ,CAAC;IACjC,MAAMyS,mBAAmB,GAAGtG,QAAQ,CAAC0F,GAAG,CAAC5T,oBAAoB,EAAEyU,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;IACjF,OAAOF,mBAAmB,CAACG,IAAI,CAAC,MAAM;MAClC,OAAO,IAAIF,OAAO,CAAEC,OAAO,IAAK;QAC5B,MAAMlQ,MAAM,GAAG0J,QAAQ,CAAC0F,GAAG,CAACrR,MAAM,CAAC;QACnC,MAAMuR,aAAa,GAAG5F,QAAQ,CAAC0F,GAAG,CAACG,cAAc,CAAC;QAClD9Q,mBAAmB,CAACuB,MAAM,EAAE,MAAM;UAC9B;UACA;UACAkQ,OAAO,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC;QACFxG,QAAQ,CAAC0F,GAAG,CAAC7Q,qBAAqB,CAAC,CAAC6R,kBAAkB,GAAG,MAAM;UAC3D;UACA;UACA;UACAF,OAAO,CAAC,IAAI,CAAC;UACb,OAAOZ,aAAa,CAACO,MAAM,GAAGrQ,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG8P,aAAa;QAC5D,CAAC;QACDtP,MAAM,CAACyP,iBAAiB,CAAC,CAAC;MAC9B,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC,CACL;EACD,OAAOf,aAAa,CAAC,CAAC,CAAC,iEAAiEvE,SAAS,CAAC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkG,6BAA6BA,CAAA,EAAG;EACrC,MAAMlG,SAAS,GAAG,CACd9M,qBAAqB,CAAC,MAAM;IACxBC,MAAM,CAACS,MAAM,CAAC,CAACuS,2BAA2B,CAAC,CAAC;EAChD,CAAC,CAAC,EACF;IAAExC,OAAO,EAAE0B,kBAAkB;IAAExB,QAAQ,EAAE,CAAC,CAAC;EAAiC,CAAC,CAChF;EACD,OAAOU,aAAa,CAAC,CAAC,CAAC,0DAA0DvE,SAAS,CAAC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoG,gBAAgBA,CAAA,EAAG;EACxB,IAAIpG,SAAS,GAAG,EAAE;EAClB,IAAI,OAAOlI,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;IAC/CkI,SAAS,GAAG,CACR;MACI2D,OAAO,EAAE1Q,uBAAuB;MAChC2Q,KAAK,EAAE,IAAI;MACXG,UAAU,EAAEA,CAAA,KAAM;QACd,MAAMlO,MAAM,GAAG1C,MAAM,CAACS,MAAM,CAAC;QAC7B,OAAO,MAAMiC,MAAM,CAACqB,MAAM,CAACC,SAAS,CAAEwI,CAAC,IAAK;UACxC;UACAgF,OAAO,CAAC0B,KAAK,GAAG,iBAAiB1G,CAAC,CAAC7I,WAAW,CAACwP,IAAI,EAAE,CAAC;UACtD3B,OAAO,CAAC4B,GAAG,CAACzR,cAAc,CAAC6K,CAAC,CAAC,CAAC;UAC9BgF,OAAO,CAAC4B,GAAG,CAAC5G,CAAC,CAAC;UACdgF,OAAO,CAAC6B,QAAQ,GAAG,CAAC;UACpB;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CACJ;EACL,CAAC,MACI;IACDxG,SAAS,GAAG,EAAE;EAClB;EACA,OAAOuE,aAAa,CAAC,CAAC,CAAC,6CAA6CvE,SAAS,CAAC;AAClF;AACA,MAAMuF,gBAAgB,GAAG,IAAI3S,cAAc,CAAC,OAAOkF,SAAS,KAAK,WAAW,IAAIA,SAAS,GAAG,kBAAkB,GAAG,EAAE,CAAC;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2O,cAAcA,CAACjH,kBAAkB,EAAE;EACxC,MAAMQ,SAAS,GAAG,CACd;IAAE2D,OAAO,EAAE4B,gBAAgB;IAAEmB,WAAW,EAAEpH;EAAgB,CAAC,EAC3D;IAAEqE,OAAO,EAAEjF,kBAAkB;IAAEgI,WAAW,EAAElH;EAAmB,CAAC,CACnE;EACD,OAAO+E,aAAa,CAAC,CAAC,CAAC,2CAA2CvE,SAAS,CAAC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2G,gBAAgBA,CAAClJ,OAAO,EAAE;EAC/B,MAAMuC,SAAS,GAAG,CAAC;IAAE2D,OAAO,EAAEpP,oBAAoB;IAAEsP,QAAQ,EAAEpG;EAAQ,CAAC,CAAC;EACxE,OAAO8G,aAAa,CAAC,CAAC,CAAC,oDAAoDvE,SAAS,CAAC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4G,gBAAgBA,CAAA,EAAG;EACxB,MAAM5G,SAAS,GAAG,CAAC;IAAE2D,OAAO,EAAEpS,gBAAgB;IAAEsV,QAAQ,EAAEvV;EAAqB,CAAC,CAAC;EACjF,OAAOiT,aAAa,CAAC,CAAC,CAAC,mDAAmDvE,SAAS,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8G,0BAA0BA,CAACC,OAAO,EAAE;EACzC,MAAM/G,SAAS,GAAG,CACd;IACI2D,OAAO,EAAEnP,wBAAwB;IACjCqP,QAAQ,EAAEkD;EACd,CAAC,CACJ;EACD,OAAOxC,aAAa,CAAC,CAAC,CAAC,uDAAuDvE,SAAS,CAAC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgH,yBAAyBA,CAAA,EAAG;EACjC,MAAMhH,SAAS,GAAG,CACdvL,0BAA0B,EAC1B;IAAEkP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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}